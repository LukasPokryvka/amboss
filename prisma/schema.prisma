generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum IncomeType {
  FULL_TIME
  CONTRACT
  FREELANCE
  ONE_OFF
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum Frequency {
  MONTHLY
  WEEKLY
  DAILY
  YEARLY
}

enum Currency {
  EUR
  USD
  CZK
}

enum BankAccountType {
  CHECKING
  SAVINGS
  TERM_DEPOSIT
  BOND
}

model User {
  id        Int      @id @default(autoincrement())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts     BankAccount[]
  transactions Transaction[]
  Income       Income[]
  IncomeEvent  IncomeEvent[]
  Bank         Bank[]
}

model Income {
  id          Int        @id @default(autoincrement())
  clerkId     String
  title       String
  type        IncomeType
  fixedNet    Float?
  hourlyRate  Float?
  hoursPerDay Float?
  frequency   Frequency?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user   User          @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  events IncomeEvent[]
}

model Bank {
  id        Int      @id @default(autoincrement())
  name      String
  clerkId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts BankAccount[]
  user     User          @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
}

model BankAccount {
  id           Int             @id @default(autoincrement())
  clerkId      String
  name         String
  bankId       Int
  type         BankAccountType
  currency     Currency        @default(EUR)
  balance      Float           @default(0)
  interestRate Float?
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  user             User          @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  bank             Bank          @relation(fields: [bankId], references: [id])
  transactions     Transaction[]
  fromTransactions Transaction[] @relation("TxFromAccount")
  toTransactions   Transaction[] @relation("TxToAccount")
  IncomeEvent      IncomeEvent[]
}

model Transaction {
  id            Int             @id @default(autoincrement())
  clerkId       String
  accountId     Int?
  fromAccountId Int?
  toAccountId   Int?
  type          TransactionType
  amount        Float
  currency      String          @default("EUR")
  executedAt    DateTime        @default(now())
  description   String?
  createdAt     DateTime        @default(now())

  user            User         @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  fromBankAccount BankAccount? @relation("TxFromAccount", fields: [fromAccountId], references: [id], onDelete: SetNull)
  toBankAccount   BankAccount? @relation("TxToAccount", fields: [toAccountId], references: [id], onDelete: SetNull)
  bankAccount     BankAccount? @relation(fields: [accountId], references: [id])
}

model IncomeEvent {
  id          Int        @id @default(autoincrement())
  incomeId    Int?
  clerkId     String
  accountId   Int?
  type        IncomeType
  amount      Float
  netAmount   Float?
  receivedAt  DateTime   @default(now())
  description String?
  createdAt   DateTime   @default(now())

  income      Income?      @relation(fields: [incomeId], references: [id], onDelete: SetNull)
  user        User         @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  bankAccount BankAccount? @relation(fields: [accountId], references: [id], onDelete: SetNull)
}
