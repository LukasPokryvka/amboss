
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Account` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Account
 * 
 */
export type AccountModel = runtime.Types.Result.DefaultSelection<Prisma.$AccountPayload>

export type AggregateAccount = {
  _count: AccountCountAggregateOutputType | null
  _avg: AccountAvgAggregateOutputType | null
  _sum: AccountSumAggregateOutputType | null
  _min: AccountMinAggregateOutputType | null
  _max: AccountMaxAggregateOutputType | null
}

export type AccountAvgAggregateOutputType = {
  id: number | null
  balance: number | null
  interestRate: number | null
}

export type AccountSumAggregateOutputType = {
  id: number | null
  balance: number | null
  interestRate: number | null
}

export type AccountMinAggregateOutputType = {
  id: number | null
  clerkId: string | null
  name: string | null
  currency: string | null
  balance: number | null
  interestRate: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AccountMaxAggregateOutputType = {
  id: number | null
  clerkId: string | null
  name: string | null
  currency: string | null
  balance: number | null
  interestRate: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AccountCountAggregateOutputType = {
  id: number
  clerkId: number
  name: number
  currency: number
  balance: number
  interestRate: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AccountAvgAggregateInputType = {
  id?: true
  balance?: true
  interestRate?: true
}

export type AccountSumAggregateInputType = {
  id?: true
  balance?: true
  interestRate?: true
}

export type AccountMinAggregateInputType = {
  id?: true
  clerkId?: true
  name?: true
  currency?: true
  balance?: true
  interestRate?: true
  createdAt?: true
  updatedAt?: true
}

export type AccountMaxAggregateInputType = {
  id?: true
  clerkId?: true
  name?: true
  currency?: true
  balance?: true
  interestRate?: true
  createdAt?: true
  updatedAt?: true
}

export type AccountCountAggregateInputType = {
  id?: true
  clerkId?: true
  name?: true
  currency?: true
  balance?: true
  interestRate?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AccountAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Account to aggregate.
   */
  where?: Prisma.AccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Accounts to fetch.
   */
  orderBy?: Prisma.AccountOrderByWithRelationInput | Prisma.AccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Accounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Accounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Accounts
  **/
  _count?: true | AccountCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AccountAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AccountSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AccountMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AccountMaxAggregateInputType
}

export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
      [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAccount[P]>
    : Prisma.GetScalarType<T[P], AggregateAccount[P]>
}




export type AccountGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AccountWhereInput
  orderBy?: Prisma.AccountOrderByWithAggregationInput | Prisma.AccountOrderByWithAggregationInput[]
  by: Prisma.AccountScalarFieldEnum[] | Prisma.AccountScalarFieldEnum
  having?: Prisma.AccountScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AccountCountAggregateInputType | true
  _avg?: AccountAvgAggregateInputType
  _sum?: AccountSumAggregateInputType
  _min?: AccountMinAggregateInputType
  _max?: AccountMaxAggregateInputType
}

export type AccountGroupByOutputType = {
  id: number
  clerkId: string
  name: string
  currency: string
  balance: number
  interestRate: number | null
  createdAt: Date
  updatedAt: Date
  _count: AccountCountAggregateOutputType | null
  _avg: AccountAvgAggregateOutputType | null
  _sum: AccountSumAggregateOutputType | null
  _min: AccountMinAggregateOutputType | null
  _max: AccountMaxAggregateOutputType | null
}

type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AccountGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AccountGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AccountGroupByOutputType[P]>
      }
    >
  >



export type AccountWhereInput = {
  AND?: Prisma.AccountWhereInput | Prisma.AccountWhereInput[]
  OR?: Prisma.AccountWhereInput[]
  NOT?: Prisma.AccountWhereInput | Prisma.AccountWhereInput[]
  id?: Prisma.IntFilter<"Account"> | number
  clerkId?: Prisma.StringFilter<"Account"> | string
  name?: Prisma.StringFilter<"Account"> | string
  currency?: Prisma.StringFilter<"Account"> | string
  balance?: Prisma.FloatFilter<"Account"> | number
  interestRate?: Prisma.FloatNullableFilter<"Account"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Account"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Account"> | Date | string
  transactions?: Prisma.TransactionListRelationFilter
  fromTransactions?: Prisma.TransactionListRelationFilter
  toTransactions?: Prisma.TransactionListRelationFilter
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  IncomeEvent?: Prisma.IncomeEventListRelationFilter
}

export type AccountOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  clerkId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  balance?: Prisma.SortOrder
  interestRate?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  transactions?: Prisma.TransactionOrderByRelationAggregateInput
  fromTransactions?: Prisma.TransactionOrderByRelationAggregateInput
  toTransactions?: Prisma.TransactionOrderByRelationAggregateInput
  user?: Prisma.UserOrderByWithRelationInput
  IncomeEvent?: Prisma.IncomeEventOrderByRelationAggregateInput
}

export type AccountWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.AccountWhereInput | Prisma.AccountWhereInput[]
  OR?: Prisma.AccountWhereInput[]
  NOT?: Prisma.AccountWhereInput | Prisma.AccountWhereInput[]
  clerkId?: Prisma.StringFilter<"Account"> | string
  name?: Prisma.StringFilter<"Account"> | string
  currency?: Prisma.StringFilter<"Account"> | string
  balance?: Prisma.FloatFilter<"Account"> | number
  interestRate?: Prisma.FloatNullableFilter<"Account"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Account"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Account"> | Date | string
  transactions?: Prisma.TransactionListRelationFilter
  fromTransactions?: Prisma.TransactionListRelationFilter
  toTransactions?: Prisma.TransactionListRelationFilter
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  IncomeEvent?: Prisma.IncomeEventListRelationFilter
}, "id">

export type AccountOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  clerkId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  balance?: Prisma.SortOrder
  interestRate?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.AccountCountOrderByAggregateInput
  _avg?: Prisma.AccountAvgOrderByAggregateInput
  _max?: Prisma.AccountMaxOrderByAggregateInput
  _min?: Prisma.AccountMinOrderByAggregateInput
  _sum?: Prisma.AccountSumOrderByAggregateInput
}

export type AccountScalarWhereWithAggregatesInput = {
  AND?: Prisma.AccountScalarWhereWithAggregatesInput | Prisma.AccountScalarWhereWithAggregatesInput[]
  OR?: Prisma.AccountScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AccountScalarWhereWithAggregatesInput | Prisma.AccountScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Account"> | number
  clerkId?: Prisma.StringWithAggregatesFilter<"Account"> | string
  name?: Prisma.StringWithAggregatesFilter<"Account"> | string
  currency?: Prisma.StringWithAggregatesFilter<"Account"> | string
  balance?: Prisma.FloatWithAggregatesFilter<"Account"> | number
  interestRate?: Prisma.FloatNullableWithAggregatesFilter<"Account"> | number | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Account"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Account"> | Date | string
}

export type AccountCreateInput = {
  name: string
  currency?: string
  balance?: number
  interestRate?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  transactions?: Prisma.TransactionCreateNestedManyWithoutAccountInput
  fromTransactions?: Prisma.TransactionCreateNestedManyWithoutFromAccountInput
  toTransactions?: Prisma.TransactionCreateNestedManyWithoutToAccountInput
  user: Prisma.UserCreateNestedOneWithoutAccountsInput
  IncomeEvent?: Prisma.IncomeEventCreateNestedManyWithoutAccountInput
}

export type AccountUncheckedCreateInput = {
  id?: number
  clerkId: string
  name: string
  currency?: string
  balance?: number
  interestRate?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutAccountInput
  fromTransactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutFromAccountInput
  toTransactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutToAccountInput
  IncomeEvent?: Prisma.IncomeEventUncheckedCreateNestedManyWithoutAccountInput
}

export type AccountUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  interestRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transactions?: Prisma.TransactionUpdateManyWithoutAccountNestedInput
  fromTransactions?: Prisma.TransactionUpdateManyWithoutFromAccountNestedInput
  toTransactions?: Prisma.TransactionUpdateManyWithoutToAccountNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutAccountsNestedInput
  IncomeEvent?: Prisma.IncomeEventUpdateManyWithoutAccountNestedInput
}

export type AccountUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  clerkId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  interestRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutAccountNestedInput
  fromTransactions?: Prisma.TransactionUncheckedUpdateManyWithoutFromAccountNestedInput
  toTransactions?: Prisma.TransactionUncheckedUpdateManyWithoutToAccountNestedInput
  IncomeEvent?: Prisma.IncomeEventUncheckedUpdateManyWithoutAccountNestedInput
}

export type AccountCreateManyInput = {
  id?: number
  clerkId: string
  name: string
  currency?: string
  balance?: number
  interestRate?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AccountUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  interestRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AccountUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  clerkId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  interestRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AccountListRelationFilter = {
  every?: Prisma.AccountWhereInput
  some?: Prisma.AccountWhereInput
  none?: Prisma.AccountWhereInput
}

export type AccountOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AccountCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  clerkId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  balance?: Prisma.SortOrder
  interestRate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AccountAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  balance?: Prisma.SortOrder
  interestRate?: Prisma.SortOrder
}

export type AccountMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  clerkId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  balance?: Prisma.SortOrder
  interestRate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AccountMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  clerkId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  balance?: Prisma.SortOrder
  interestRate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AccountSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  balance?: Prisma.SortOrder
  interestRate?: Prisma.SortOrder
}

export type AccountNullableScalarRelationFilter = {
  is?: Prisma.AccountWhereInput | null
  isNot?: Prisma.AccountWhereInput | null
}

export type AccountCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AccountCreateWithoutUserInput, Prisma.AccountUncheckedCreateWithoutUserInput> | Prisma.AccountCreateWithoutUserInput[] | Prisma.AccountUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AccountCreateOrConnectWithoutUserInput | Prisma.AccountCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AccountCreateManyUserInputEnvelope
  connect?: Prisma.AccountWhereUniqueInput | Prisma.AccountWhereUniqueInput[]
}

export type AccountUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AccountCreateWithoutUserInput, Prisma.AccountUncheckedCreateWithoutUserInput> | Prisma.AccountCreateWithoutUserInput[] | Prisma.AccountUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AccountCreateOrConnectWithoutUserInput | Prisma.AccountCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AccountCreateManyUserInputEnvelope
  connect?: Prisma.AccountWhereUniqueInput | Prisma.AccountWhereUniqueInput[]
}

export type AccountUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AccountCreateWithoutUserInput, Prisma.AccountUncheckedCreateWithoutUserInput> | Prisma.AccountCreateWithoutUserInput[] | Prisma.AccountUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AccountCreateOrConnectWithoutUserInput | Prisma.AccountCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AccountUpsertWithWhereUniqueWithoutUserInput | Prisma.AccountUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AccountCreateManyUserInputEnvelope
  set?: Prisma.AccountWhereUniqueInput | Prisma.AccountWhereUniqueInput[]
  disconnect?: Prisma.AccountWhereUniqueInput | Prisma.AccountWhereUniqueInput[]
  delete?: Prisma.AccountWhereUniqueInput | Prisma.AccountWhereUniqueInput[]
  connect?: Prisma.AccountWhereUniqueInput | Prisma.AccountWhereUniqueInput[]
  update?: Prisma.AccountUpdateWithWhereUniqueWithoutUserInput | Prisma.AccountUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AccountUpdateManyWithWhereWithoutUserInput | Prisma.AccountUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AccountScalarWhereInput | Prisma.AccountScalarWhereInput[]
}

export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AccountCreateWithoutUserInput, Prisma.AccountUncheckedCreateWithoutUserInput> | Prisma.AccountCreateWithoutUserInput[] | Prisma.AccountUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AccountCreateOrConnectWithoutUserInput | Prisma.AccountCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AccountUpsertWithWhereUniqueWithoutUserInput | Prisma.AccountUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AccountCreateManyUserInputEnvelope
  set?: Prisma.AccountWhereUniqueInput | Prisma.AccountWhereUniqueInput[]
  disconnect?: Prisma.AccountWhereUniqueInput | Prisma.AccountWhereUniqueInput[]
  delete?: Prisma.AccountWhereUniqueInput | Prisma.AccountWhereUniqueInput[]
  connect?: Prisma.AccountWhereUniqueInput | Prisma.AccountWhereUniqueInput[]
  update?: Prisma.AccountUpdateWithWhereUniqueWithoutUserInput | Prisma.AccountUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AccountUpdateManyWithWhereWithoutUserInput | Prisma.AccountUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AccountScalarWhereInput | Prisma.AccountScalarWhereInput[]
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type AccountCreateNestedOneWithoutFromTransactionsInput = {
  create?: Prisma.XOR<Prisma.AccountCreateWithoutFromTransactionsInput, Prisma.AccountUncheckedCreateWithoutFromTransactionsInput>
  connectOrCreate?: Prisma.AccountCreateOrConnectWithoutFromTransactionsInput
  connect?: Prisma.AccountWhereUniqueInput
}

export type AccountCreateNestedOneWithoutToTransactionsInput = {
  create?: Prisma.XOR<Prisma.AccountCreateWithoutToTransactionsInput, Prisma.AccountUncheckedCreateWithoutToTransactionsInput>
  connectOrCreate?: Prisma.AccountCreateOrConnectWithoutToTransactionsInput
  connect?: Prisma.AccountWhereUniqueInput
}

export type AccountCreateNestedOneWithoutTransactionsInput = {
  create?: Prisma.XOR<Prisma.AccountCreateWithoutTransactionsInput, Prisma.AccountUncheckedCreateWithoutTransactionsInput>
  connectOrCreate?: Prisma.AccountCreateOrConnectWithoutTransactionsInput
  connect?: Prisma.AccountWhereUniqueInput
}

export type AccountUpdateOneWithoutFromTransactionsNestedInput = {
  create?: Prisma.XOR<Prisma.AccountCreateWithoutFromTransactionsInput, Prisma.AccountUncheckedCreateWithoutFromTransactionsInput>
  connectOrCreate?: Prisma.AccountCreateOrConnectWithoutFromTransactionsInput
  upsert?: Prisma.AccountUpsertWithoutFromTransactionsInput
  disconnect?: Prisma.AccountWhereInput | boolean
  delete?: Prisma.AccountWhereInput | boolean
  connect?: Prisma.AccountWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AccountUpdateToOneWithWhereWithoutFromTransactionsInput, Prisma.AccountUpdateWithoutFromTransactionsInput>, Prisma.AccountUncheckedUpdateWithoutFromTransactionsInput>
}

export type AccountUpdateOneWithoutToTransactionsNestedInput = {
  create?: Prisma.XOR<Prisma.AccountCreateWithoutToTransactionsInput, Prisma.AccountUncheckedCreateWithoutToTransactionsInput>
  connectOrCreate?: Prisma.AccountCreateOrConnectWithoutToTransactionsInput
  upsert?: Prisma.AccountUpsertWithoutToTransactionsInput
  disconnect?: Prisma.AccountWhereInput | boolean
  delete?: Prisma.AccountWhereInput | boolean
  connect?: Prisma.AccountWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AccountUpdateToOneWithWhereWithoutToTransactionsInput, Prisma.AccountUpdateWithoutToTransactionsInput>, Prisma.AccountUncheckedUpdateWithoutToTransactionsInput>
}

export type AccountUpdateOneWithoutTransactionsNestedInput = {
  create?: Prisma.XOR<Prisma.AccountCreateWithoutTransactionsInput, Prisma.AccountUncheckedCreateWithoutTransactionsInput>
  connectOrCreate?: Prisma.AccountCreateOrConnectWithoutTransactionsInput
  upsert?: Prisma.AccountUpsertWithoutTransactionsInput
  disconnect?: Prisma.AccountWhereInput | boolean
  delete?: Prisma.AccountWhereInput | boolean
  connect?: Prisma.AccountWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AccountUpdateToOneWithWhereWithoutTransactionsInput, Prisma.AccountUpdateWithoutTransactionsInput>, Prisma.AccountUncheckedUpdateWithoutTransactionsInput>
}

export type AccountCreateNestedOneWithoutIncomeEventInput = {
  create?: Prisma.XOR<Prisma.AccountCreateWithoutIncomeEventInput, Prisma.AccountUncheckedCreateWithoutIncomeEventInput>
  connectOrCreate?: Prisma.AccountCreateOrConnectWithoutIncomeEventInput
  connect?: Prisma.AccountWhereUniqueInput
}

export type AccountUpdateOneWithoutIncomeEventNestedInput = {
  create?: Prisma.XOR<Prisma.AccountCreateWithoutIncomeEventInput, Prisma.AccountUncheckedCreateWithoutIncomeEventInput>
  connectOrCreate?: Prisma.AccountCreateOrConnectWithoutIncomeEventInput
  upsert?: Prisma.AccountUpsertWithoutIncomeEventInput
  disconnect?: Prisma.AccountWhereInput | boolean
  delete?: Prisma.AccountWhereInput | boolean
  connect?: Prisma.AccountWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AccountUpdateToOneWithWhereWithoutIncomeEventInput, Prisma.AccountUpdateWithoutIncomeEventInput>, Prisma.AccountUncheckedUpdateWithoutIncomeEventInput>
}

export type AccountCreateWithoutUserInput = {
  name: string
  currency?: string
  balance?: number
  interestRate?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  transactions?: Prisma.TransactionCreateNestedManyWithoutAccountInput
  fromTransactions?: Prisma.TransactionCreateNestedManyWithoutFromAccountInput
  toTransactions?: Prisma.TransactionCreateNestedManyWithoutToAccountInput
  IncomeEvent?: Prisma.IncomeEventCreateNestedManyWithoutAccountInput
}

export type AccountUncheckedCreateWithoutUserInput = {
  id?: number
  name: string
  currency?: string
  balance?: number
  interestRate?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutAccountInput
  fromTransactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutFromAccountInput
  toTransactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutToAccountInput
  IncomeEvent?: Prisma.IncomeEventUncheckedCreateNestedManyWithoutAccountInput
}

export type AccountCreateOrConnectWithoutUserInput = {
  where: Prisma.AccountWhereUniqueInput
  create: Prisma.XOR<Prisma.AccountCreateWithoutUserInput, Prisma.AccountUncheckedCreateWithoutUserInput>
}

export type AccountCreateManyUserInputEnvelope = {
  data: Prisma.AccountCreateManyUserInput | Prisma.AccountCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type AccountUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.AccountWhereUniqueInput
  update: Prisma.XOR<Prisma.AccountUpdateWithoutUserInput, Prisma.AccountUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.AccountCreateWithoutUserInput, Prisma.AccountUncheckedCreateWithoutUserInput>
}

export type AccountUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.AccountWhereUniqueInput
  data: Prisma.XOR<Prisma.AccountUpdateWithoutUserInput, Prisma.AccountUncheckedUpdateWithoutUserInput>
}

export type AccountUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.AccountScalarWhereInput
  data: Prisma.XOR<Prisma.AccountUpdateManyMutationInput, Prisma.AccountUncheckedUpdateManyWithoutUserInput>
}

export type AccountScalarWhereInput = {
  AND?: Prisma.AccountScalarWhereInput | Prisma.AccountScalarWhereInput[]
  OR?: Prisma.AccountScalarWhereInput[]
  NOT?: Prisma.AccountScalarWhereInput | Prisma.AccountScalarWhereInput[]
  id?: Prisma.IntFilter<"Account"> | number
  clerkId?: Prisma.StringFilter<"Account"> | string
  name?: Prisma.StringFilter<"Account"> | string
  currency?: Prisma.StringFilter<"Account"> | string
  balance?: Prisma.FloatFilter<"Account"> | number
  interestRate?: Prisma.FloatNullableFilter<"Account"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Account"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Account"> | Date | string
}

export type AccountCreateWithoutFromTransactionsInput = {
  name: string
  currency?: string
  balance?: number
  interestRate?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  transactions?: Prisma.TransactionCreateNestedManyWithoutAccountInput
  toTransactions?: Prisma.TransactionCreateNestedManyWithoutToAccountInput
  user: Prisma.UserCreateNestedOneWithoutAccountsInput
  IncomeEvent?: Prisma.IncomeEventCreateNestedManyWithoutAccountInput
}

export type AccountUncheckedCreateWithoutFromTransactionsInput = {
  id?: number
  clerkId: string
  name: string
  currency?: string
  balance?: number
  interestRate?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutAccountInput
  toTransactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutToAccountInput
  IncomeEvent?: Prisma.IncomeEventUncheckedCreateNestedManyWithoutAccountInput
}

export type AccountCreateOrConnectWithoutFromTransactionsInput = {
  where: Prisma.AccountWhereUniqueInput
  create: Prisma.XOR<Prisma.AccountCreateWithoutFromTransactionsInput, Prisma.AccountUncheckedCreateWithoutFromTransactionsInput>
}

export type AccountCreateWithoutToTransactionsInput = {
  name: string
  currency?: string
  balance?: number
  interestRate?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  transactions?: Prisma.TransactionCreateNestedManyWithoutAccountInput
  fromTransactions?: Prisma.TransactionCreateNestedManyWithoutFromAccountInput
  user: Prisma.UserCreateNestedOneWithoutAccountsInput
  IncomeEvent?: Prisma.IncomeEventCreateNestedManyWithoutAccountInput
}

export type AccountUncheckedCreateWithoutToTransactionsInput = {
  id?: number
  clerkId: string
  name: string
  currency?: string
  balance?: number
  interestRate?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutAccountInput
  fromTransactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutFromAccountInput
  IncomeEvent?: Prisma.IncomeEventUncheckedCreateNestedManyWithoutAccountInput
}

export type AccountCreateOrConnectWithoutToTransactionsInput = {
  where: Prisma.AccountWhereUniqueInput
  create: Prisma.XOR<Prisma.AccountCreateWithoutToTransactionsInput, Prisma.AccountUncheckedCreateWithoutToTransactionsInput>
}

export type AccountCreateWithoutTransactionsInput = {
  name: string
  currency?: string
  balance?: number
  interestRate?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  fromTransactions?: Prisma.TransactionCreateNestedManyWithoutFromAccountInput
  toTransactions?: Prisma.TransactionCreateNestedManyWithoutToAccountInput
  user: Prisma.UserCreateNestedOneWithoutAccountsInput
  IncomeEvent?: Prisma.IncomeEventCreateNestedManyWithoutAccountInput
}

export type AccountUncheckedCreateWithoutTransactionsInput = {
  id?: number
  clerkId: string
  name: string
  currency?: string
  balance?: number
  interestRate?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  fromTransactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutFromAccountInput
  toTransactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutToAccountInput
  IncomeEvent?: Prisma.IncomeEventUncheckedCreateNestedManyWithoutAccountInput
}

export type AccountCreateOrConnectWithoutTransactionsInput = {
  where: Prisma.AccountWhereUniqueInput
  create: Prisma.XOR<Prisma.AccountCreateWithoutTransactionsInput, Prisma.AccountUncheckedCreateWithoutTransactionsInput>
}

export type AccountUpsertWithoutFromTransactionsInput = {
  update: Prisma.XOR<Prisma.AccountUpdateWithoutFromTransactionsInput, Prisma.AccountUncheckedUpdateWithoutFromTransactionsInput>
  create: Prisma.XOR<Prisma.AccountCreateWithoutFromTransactionsInput, Prisma.AccountUncheckedCreateWithoutFromTransactionsInput>
  where?: Prisma.AccountWhereInput
}

export type AccountUpdateToOneWithWhereWithoutFromTransactionsInput = {
  where?: Prisma.AccountWhereInput
  data: Prisma.XOR<Prisma.AccountUpdateWithoutFromTransactionsInput, Prisma.AccountUncheckedUpdateWithoutFromTransactionsInput>
}

export type AccountUpdateWithoutFromTransactionsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  interestRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transactions?: Prisma.TransactionUpdateManyWithoutAccountNestedInput
  toTransactions?: Prisma.TransactionUpdateManyWithoutToAccountNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutAccountsNestedInput
  IncomeEvent?: Prisma.IncomeEventUpdateManyWithoutAccountNestedInput
}

export type AccountUncheckedUpdateWithoutFromTransactionsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  clerkId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  interestRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutAccountNestedInput
  toTransactions?: Prisma.TransactionUncheckedUpdateManyWithoutToAccountNestedInput
  IncomeEvent?: Prisma.IncomeEventUncheckedUpdateManyWithoutAccountNestedInput
}

export type AccountUpsertWithoutToTransactionsInput = {
  update: Prisma.XOR<Prisma.AccountUpdateWithoutToTransactionsInput, Prisma.AccountUncheckedUpdateWithoutToTransactionsInput>
  create: Prisma.XOR<Prisma.AccountCreateWithoutToTransactionsInput, Prisma.AccountUncheckedCreateWithoutToTransactionsInput>
  where?: Prisma.AccountWhereInput
}

export type AccountUpdateToOneWithWhereWithoutToTransactionsInput = {
  where?: Prisma.AccountWhereInput
  data: Prisma.XOR<Prisma.AccountUpdateWithoutToTransactionsInput, Prisma.AccountUncheckedUpdateWithoutToTransactionsInput>
}

export type AccountUpdateWithoutToTransactionsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  interestRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transactions?: Prisma.TransactionUpdateManyWithoutAccountNestedInput
  fromTransactions?: Prisma.TransactionUpdateManyWithoutFromAccountNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutAccountsNestedInput
  IncomeEvent?: Prisma.IncomeEventUpdateManyWithoutAccountNestedInput
}

export type AccountUncheckedUpdateWithoutToTransactionsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  clerkId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  interestRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutAccountNestedInput
  fromTransactions?: Prisma.TransactionUncheckedUpdateManyWithoutFromAccountNestedInput
  IncomeEvent?: Prisma.IncomeEventUncheckedUpdateManyWithoutAccountNestedInput
}

export type AccountUpsertWithoutTransactionsInput = {
  update: Prisma.XOR<Prisma.AccountUpdateWithoutTransactionsInput, Prisma.AccountUncheckedUpdateWithoutTransactionsInput>
  create: Prisma.XOR<Prisma.AccountCreateWithoutTransactionsInput, Prisma.AccountUncheckedCreateWithoutTransactionsInput>
  where?: Prisma.AccountWhereInput
}

export type AccountUpdateToOneWithWhereWithoutTransactionsInput = {
  where?: Prisma.AccountWhereInput
  data: Prisma.XOR<Prisma.AccountUpdateWithoutTransactionsInput, Prisma.AccountUncheckedUpdateWithoutTransactionsInput>
}

export type AccountUpdateWithoutTransactionsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  interestRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fromTransactions?: Prisma.TransactionUpdateManyWithoutFromAccountNestedInput
  toTransactions?: Prisma.TransactionUpdateManyWithoutToAccountNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutAccountsNestedInput
  IncomeEvent?: Prisma.IncomeEventUpdateManyWithoutAccountNestedInput
}

export type AccountUncheckedUpdateWithoutTransactionsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  clerkId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  interestRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fromTransactions?: Prisma.TransactionUncheckedUpdateManyWithoutFromAccountNestedInput
  toTransactions?: Prisma.TransactionUncheckedUpdateManyWithoutToAccountNestedInput
  IncomeEvent?: Prisma.IncomeEventUncheckedUpdateManyWithoutAccountNestedInput
}

export type AccountCreateWithoutIncomeEventInput = {
  name: string
  currency?: string
  balance?: number
  interestRate?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  transactions?: Prisma.TransactionCreateNestedManyWithoutAccountInput
  fromTransactions?: Prisma.TransactionCreateNestedManyWithoutFromAccountInput
  toTransactions?: Prisma.TransactionCreateNestedManyWithoutToAccountInput
  user: Prisma.UserCreateNestedOneWithoutAccountsInput
}

export type AccountUncheckedCreateWithoutIncomeEventInput = {
  id?: number
  clerkId: string
  name: string
  currency?: string
  balance?: number
  interestRate?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutAccountInput
  fromTransactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutFromAccountInput
  toTransactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutToAccountInput
}

export type AccountCreateOrConnectWithoutIncomeEventInput = {
  where: Prisma.AccountWhereUniqueInput
  create: Prisma.XOR<Prisma.AccountCreateWithoutIncomeEventInput, Prisma.AccountUncheckedCreateWithoutIncomeEventInput>
}

export type AccountUpsertWithoutIncomeEventInput = {
  update: Prisma.XOR<Prisma.AccountUpdateWithoutIncomeEventInput, Prisma.AccountUncheckedUpdateWithoutIncomeEventInput>
  create: Prisma.XOR<Prisma.AccountCreateWithoutIncomeEventInput, Prisma.AccountUncheckedCreateWithoutIncomeEventInput>
  where?: Prisma.AccountWhereInput
}

export type AccountUpdateToOneWithWhereWithoutIncomeEventInput = {
  where?: Prisma.AccountWhereInput
  data: Prisma.XOR<Prisma.AccountUpdateWithoutIncomeEventInput, Prisma.AccountUncheckedUpdateWithoutIncomeEventInput>
}

export type AccountUpdateWithoutIncomeEventInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  interestRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transactions?: Prisma.TransactionUpdateManyWithoutAccountNestedInput
  fromTransactions?: Prisma.TransactionUpdateManyWithoutFromAccountNestedInput
  toTransactions?: Prisma.TransactionUpdateManyWithoutToAccountNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutAccountsNestedInput
}

export type AccountUncheckedUpdateWithoutIncomeEventInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  clerkId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  interestRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutAccountNestedInput
  fromTransactions?: Prisma.TransactionUncheckedUpdateManyWithoutFromAccountNestedInput
  toTransactions?: Prisma.TransactionUncheckedUpdateManyWithoutToAccountNestedInput
}

export type AccountCreateManyUserInput = {
  id?: number
  name: string
  currency?: string
  balance?: number
  interestRate?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AccountUpdateWithoutUserInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  interestRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transactions?: Prisma.TransactionUpdateManyWithoutAccountNestedInput
  fromTransactions?: Prisma.TransactionUpdateManyWithoutFromAccountNestedInput
  toTransactions?: Prisma.TransactionUpdateManyWithoutToAccountNestedInput
  IncomeEvent?: Prisma.IncomeEventUpdateManyWithoutAccountNestedInput
}

export type AccountUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  interestRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutAccountNestedInput
  fromTransactions?: Prisma.TransactionUncheckedUpdateManyWithoutFromAccountNestedInput
  toTransactions?: Prisma.TransactionUncheckedUpdateManyWithoutToAccountNestedInput
  IncomeEvent?: Prisma.IncomeEventUncheckedUpdateManyWithoutAccountNestedInput
}

export type AccountUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  interestRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type AccountCountOutputType
 */

export type AccountCountOutputType = {
  transactions: number
  fromTransactions: number
  toTransactions: number
  IncomeEvent: number
}

export type AccountCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transactions?: boolean | AccountCountOutputTypeCountTransactionsArgs
  fromTransactions?: boolean | AccountCountOutputTypeCountFromTransactionsArgs
  toTransactions?: boolean | AccountCountOutputTypeCountToTransactionsArgs
  IncomeEvent?: boolean | AccountCountOutputTypeCountIncomeEventArgs
}

/**
 * AccountCountOutputType without action
 */
export type AccountCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountCountOutputType
   */
  select?: Prisma.AccountCountOutputTypeSelect<ExtArgs> | null
}

/**
 * AccountCountOutputType without action
 */
export type AccountCountOutputTypeCountTransactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransactionWhereInput
}

/**
 * AccountCountOutputType without action
 */
export type AccountCountOutputTypeCountFromTransactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransactionWhereInput
}

/**
 * AccountCountOutputType without action
 */
export type AccountCountOutputTypeCountToTransactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransactionWhereInput
}

/**
 * AccountCountOutputType without action
 */
export type AccountCountOutputTypeCountIncomeEventArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IncomeEventWhereInput
}


export type AccountSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  clerkId?: boolean
  name?: boolean
  currency?: boolean
  balance?: boolean
  interestRate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  transactions?: boolean | Prisma.Account$transactionsArgs<ExtArgs>
  fromTransactions?: boolean | Prisma.Account$fromTransactionsArgs<ExtArgs>
  toTransactions?: boolean | Prisma.Account$toTransactionsArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  IncomeEvent?: boolean | Prisma.Account$IncomeEventArgs<ExtArgs>
  _count?: boolean | Prisma.AccountCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["account"]>

export type AccountSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  clerkId?: boolean
  name?: boolean
  currency?: boolean
  balance?: boolean
  interestRate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["account"]>

export type AccountSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  clerkId?: boolean
  name?: boolean
  currency?: boolean
  balance?: boolean
  interestRate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["account"]>

export type AccountSelectScalar = {
  id?: boolean
  clerkId?: boolean
  name?: boolean
  currency?: boolean
  balance?: boolean
  interestRate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AccountOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "clerkId" | "name" | "currency" | "balance" | "interestRate" | "createdAt" | "updatedAt", ExtArgs["result"]["account"]>
export type AccountInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transactions?: boolean | Prisma.Account$transactionsArgs<ExtArgs>
  fromTransactions?: boolean | Prisma.Account$fromTransactionsArgs<ExtArgs>
  toTransactions?: boolean | Prisma.Account$toTransactionsArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  IncomeEvent?: boolean | Prisma.Account$IncomeEventArgs<ExtArgs>
  _count?: boolean | Prisma.AccountCountOutputTypeDefaultArgs<ExtArgs>
}
export type AccountIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AccountIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $AccountPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Account"
  objects: {
    transactions: Prisma.$TransactionPayload<ExtArgs>[]
    fromTransactions: Prisma.$TransactionPayload<ExtArgs>[]
    toTransactions: Prisma.$TransactionPayload<ExtArgs>[]
    user: Prisma.$UserPayload<ExtArgs>
    IncomeEvent: Prisma.$IncomeEventPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    clerkId: string
    name: string
    currency: string
    balance: number
    interestRate: number | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["account"]>
  composites: {}
}

export type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AccountPayload, S>

export type AccountCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AccountCountAggregateInputType | true
  }

export interface AccountDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
  /**
   * Find zero or one Account that matches the filter.
   * @param {AccountFindUniqueArgs} args - Arguments to find a Account
   * @example
   * // Get one Account
   * const account = await prisma.account.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AccountFindUniqueArgs>(args: Prisma.SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AccountClient<runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Account that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
   * @example
   * // Get one Account
   * const account = await prisma.account.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AccountClient<runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Account that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountFindFirstArgs} args - Arguments to find a Account
   * @example
   * // Get one Account
   * const account = await prisma.account.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AccountFindFirstArgs>(args?: Prisma.SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma.Prisma__AccountClient<runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Account that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
   * @example
   * // Get one Account
   * const account = await prisma.account.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AccountClient<runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Accounts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Accounts
   * const accounts = await prisma.account.findMany()
   * 
   * // Get first 10 Accounts
   * const accounts = await prisma.account.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AccountFindManyArgs>(args?: Prisma.SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Account.
   * @param {AccountCreateArgs} args - Arguments to create a Account.
   * @example
   * // Create one Account
   * const Account = await prisma.account.create({
   *   data: {
   *     // ... data to create a Account
   *   }
   * })
   * 
   */
  create<T extends AccountCreateArgs>(args: Prisma.SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma.Prisma__AccountClient<runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Accounts.
   * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
   * @example
   * // Create many Accounts
   * const account = await prisma.account.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AccountCreateManyArgs>(args?: Prisma.SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Accounts and returns the data saved in the database.
   * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
   * @example
   * // Create many Accounts
   * const account = await prisma.account.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Accounts and only return the `id`
   * const accountWithIdOnly = await prisma.account.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Account.
   * @param {AccountDeleteArgs} args - Arguments to delete one Account.
   * @example
   * // Delete one Account
   * const Account = await prisma.account.delete({
   *   where: {
   *     // ... filter to delete one Account
   *   }
   * })
   * 
   */
  delete<T extends AccountDeleteArgs>(args: Prisma.SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma.Prisma__AccountClient<runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Account.
   * @param {AccountUpdateArgs} args - Arguments to update one Account.
   * @example
   * // Update one Account
   * const account = await prisma.account.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AccountUpdateArgs>(args: Prisma.SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma.Prisma__AccountClient<runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Accounts.
   * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
   * @example
   * // Delete a few Accounts
   * const { count } = await prisma.account.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AccountDeleteManyArgs>(args?: Prisma.SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Accounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Accounts
   * const account = await prisma.account.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AccountUpdateManyArgs>(args: Prisma.SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Accounts and returns the data updated in the database.
   * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
   * @example
   * // Update many Accounts
   * const account = await prisma.account.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Accounts and only return the `id`
   * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Account.
   * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
   * @example
   * // Update or create a Account
   * const account = await prisma.account.upsert({
   *   create: {
   *     // ... data to create a Account
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Account we want to update
   *   }
   * })
   */
  upsert<T extends AccountUpsertArgs>(args: Prisma.SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma.Prisma__AccountClient<runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Accounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
   * @example
   * // Count the number of Accounts
   * const count = await prisma.account.count({
   *   where: {
   *     // ... the filter for the Accounts we want to count
   *   }
   * })
  **/
  count<T extends AccountCountArgs>(
    args?: Prisma.Subset<T, AccountCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AccountCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Account.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AccountAggregateArgs>(args: Prisma.Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

  /**
   * Group by Account.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AccountGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AccountGroupByArgs['orderBy'] }
      : { orderBy?: AccountGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Account model
 */
readonly fields: AccountFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Account.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AccountClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  transactions<T extends Prisma.Account$transactionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Account$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  fromTransactions<T extends Prisma.Account$fromTransactionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Account$fromTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  toTransactions<T extends Prisma.Account$toTransactionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Account$toTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  IncomeEvent<T extends Prisma.Account$IncomeEventArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Account$IncomeEventArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncomeEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Account model
 */
export interface AccountFieldRefs {
  readonly id: Prisma.FieldRef<"Account", 'Int'>
  readonly clerkId: Prisma.FieldRef<"Account", 'String'>
  readonly name: Prisma.FieldRef<"Account", 'String'>
  readonly currency: Prisma.FieldRef<"Account", 'String'>
  readonly balance: Prisma.FieldRef<"Account", 'Float'>
  readonly interestRate: Prisma.FieldRef<"Account", 'Float'>
  readonly createdAt: Prisma.FieldRef<"Account", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Account", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Account findUnique
 */
export type AccountFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null
  /**
   * Filter, which Account to fetch.
   */
  where: Prisma.AccountWhereUniqueInput
}

/**
 * Account findUniqueOrThrow
 */
export type AccountFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null
  /**
   * Filter, which Account to fetch.
   */
  where: Prisma.AccountWhereUniqueInput
}

/**
 * Account findFirst
 */
export type AccountFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null
  /**
   * Filter, which Account to fetch.
   */
  where?: Prisma.AccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Accounts to fetch.
   */
  orderBy?: Prisma.AccountOrderByWithRelationInput | Prisma.AccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Accounts.
   */
  cursor?: Prisma.AccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Accounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Accounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Accounts.
   */
  distinct?: Prisma.AccountScalarFieldEnum | Prisma.AccountScalarFieldEnum[]
}

/**
 * Account findFirstOrThrow
 */
export type AccountFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null
  /**
   * Filter, which Account to fetch.
   */
  where?: Prisma.AccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Accounts to fetch.
   */
  orderBy?: Prisma.AccountOrderByWithRelationInput | Prisma.AccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Accounts.
   */
  cursor?: Prisma.AccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Accounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Accounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Accounts.
   */
  distinct?: Prisma.AccountScalarFieldEnum | Prisma.AccountScalarFieldEnum[]
}

/**
 * Account findMany
 */
export type AccountFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null
  /**
   * Filter, which Accounts to fetch.
   */
  where?: Prisma.AccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Accounts to fetch.
   */
  orderBy?: Prisma.AccountOrderByWithRelationInput | Prisma.AccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Accounts.
   */
  cursor?: Prisma.AccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Accounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Accounts.
   */
  skip?: number
  distinct?: Prisma.AccountScalarFieldEnum | Prisma.AccountScalarFieldEnum[]
}

/**
 * Account create
 */
export type AccountCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null
  /**
   * The data needed to create a Account.
   */
  data: Prisma.XOR<Prisma.AccountCreateInput, Prisma.AccountUncheckedCreateInput>
}

/**
 * Account createMany
 */
export type AccountCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Accounts.
   */
  data: Prisma.AccountCreateManyInput | Prisma.AccountCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Account createManyAndReturn
 */
export type AccountCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null
  /**
   * The data used to create many Accounts.
   */
  data: Prisma.AccountCreateManyInput | Prisma.AccountCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Account update
 */
export type AccountUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null
  /**
   * The data needed to update a Account.
   */
  data: Prisma.XOR<Prisma.AccountUpdateInput, Prisma.AccountUncheckedUpdateInput>
  /**
   * Choose, which Account to update.
   */
  where: Prisma.AccountWhereUniqueInput
}

/**
 * Account updateMany
 */
export type AccountUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Accounts.
   */
  data: Prisma.XOR<Prisma.AccountUpdateManyMutationInput, Prisma.AccountUncheckedUpdateManyInput>
  /**
   * Filter which Accounts to update
   */
  where?: Prisma.AccountWhereInput
  /**
   * Limit how many Accounts to update.
   */
  limit?: number
}

/**
 * Account updateManyAndReturn
 */
export type AccountUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null
  /**
   * The data used to update Accounts.
   */
  data: Prisma.XOR<Prisma.AccountUpdateManyMutationInput, Prisma.AccountUncheckedUpdateManyInput>
  /**
   * Filter which Accounts to update
   */
  where?: Prisma.AccountWhereInput
  /**
   * Limit how many Accounts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Account upsert
 */
export type AccountUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null
  /**
   * The filter to search for the Account to update in case it exists.
   */
  where: Prisma.AccountWhereUniqueInput
  /**
   * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
   */
  create: Prisma.XOR<Prisma.AccountCreateInput, Prisma.AccountUncheckedCreateInput>
  /**
   * In case the Account was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AccountUpdateInput, Prisma.AccountUncheckedUpdateInput>
}

/**
 * Account delete
 */
export type AccountDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null
  /**
   * Filter which Account to delete.
   */
  where: Prisma.AccountWhereUniqueInput
}

/**
 * Account deleteMany
 */
export type AccountDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Accounts to delete
   */
  where?: Prisma.AccountWhereInput
  /**
   * Limit how many Accounts to delete.
   */
  limit?: number
}

/**
 * Account.transactions
 */
export type Account$transactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
  where?: Prisma.TransactionWhereInput
  orderBy?: Prisma.TransactionOrderByWithRelationInput | Prisma.TransactionOrderByWithRelationInput[]
  cursor?: Prisma.TransactionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TransactionScalarFieldEnum | Prisma.TransactionScalarFieldEnum[]
}

/**
 * Account.fromTransactions
 */
export type Account$fromTransactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
  where?: Prisma.TransactionWhereInput
  orderBy?: Prisma.TransactionOrderByWithRelationInput | Prisma.TransactionOrderByWithRelationInput[]
  cursor?: Prisma.TransactionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TransactionScalarFieldEnum | Prisma.TransactionScalarFieldEnum[]
}

/**
 * Account.toTransactions
 */
export type Account$toTransactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
  where?: Prisma.TransactionWhereInput
  orderBy?: Prisma.TransactionOrderByWithRelationInput | Prisma.TransactionOrderByWithRelationInput[]
  cursor?: Prisma.TransactionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TransactionScalarFieldEnum | Prisma.TransactionScalarFieldEnum[]
}

/**
 * Account.IncomeEvent
 */
export type Account$IncomeEventArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeEvent
   */
  select?: Prisma.IncomeEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeEvent
   */
  omit?: Prisma.IncomeEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeEventInclude<ExtArgs> | null
  where?: Prisma.IncomeEventWhereInput
  orderBy?: Prisma.IncomeEventOrderByWithRelationInput | Prisma.IncomeEventOrderByWithRelationInput[]
  cursor?: Prisma.IncomeEventWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.IncomeEventScalarFieldEnum | Prisma.IncomeEventScalarFieldEnum[]
}

/**
 * Account without action
 */
export type AccountDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null
}
