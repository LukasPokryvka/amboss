
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `IncomeEvent` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model IncomeEvent
 * 
 */
export type IncomeEventModel = runtime.Types.Result.DefaultSelection<Prisma.$IncomeEventPayload>

export type AggregateIncomeEvent = {
  _count: IncomeEventCountAggregateOutputType | null
  _avg: IncomeEventAvgAggregateOutputType | null
  _sum: IncomeEventSumAggregateOutputType | null
  _min: IncomeEventMinAggregateOutputType | null
  _max: IncomeEventMaxAggregateOutputType | null
}

export type IncomeEventAvgAggregateOutputType = {
  id: number | null
  incomeId: number | null
  accountId: number | null
  amount: number | null
  netAmount: number | null
}

export type IncomeEventSumAggregateOutputType = {
  id: number | null
  incomeId: number | null
  accountId: number | null
  amount: number | null
  netAmount: number | null
}

export type IncomeEventMinAggregateOutputType = {
  id: number | null
  incomeId: number | null
  clerkId: string | null
  accountId: number | null
  type: $Enums.IncomeType | null
  amount: number | null
  netAmount: number | null
  receivedAt: Date | null
  description: string | null
  createdAt: Date | null
}

export type IncomeEventMaxAggregateOutputType = {
  id: number | null
  incomeId: number | null
  clerkId: string | null
  accountId: number | null
  type: $Enums.IncomeType | null
  amount: number | null
  netAmount: number | null
  receivedAt: Date | null
  description: string | null
  createdAt: Date | null
}

export type IncomeEventCountAggregateOutputType = {
  id: number
  incomeId: number
  clerkId: number
  accountId: number
  type: number
  amount: number
  netAmount: number
  receivedAt: number
  description: number
  createdAt: number
  _all: number
}


export type IncomeEventAvgAggregateInputType = {
  id?: true
  incomeId?: true
  accountId?: true
  amount?: true
  netAmount?: true
}

export type IncomeEventSumAggregateInputType = {
  id?: true
  incomeId?: true
  accountId?: true
  amount?: true
  netAmount?: true
}

export type IncomeEventMinAggregateInputType = {
  id?: true
  incomeId?: true
  clerkId?: true
  accountId?: true
  type?: true
  amount?: true
  netAmount?: true
  receivedAt?: true
  description?: true
  createdAt?: true
}

export type IncomeEventMaxAggregateInputType = {
  id?: true
  incomeId?: true
  clerkId?: true
  accountId?: true
  type?: true
  amount?: true
  netAmount?: true
  receivedAt?: true
  description?: true
  createdAt?: true
}

export type IncomeEventCountAggregateInputType = {
  id?: true
  incomeId?: true
  clerkId?: true
  accountId?: true
  type?: true
  amount?: true
  netAmount?: true
  receivedAt?: true
  description?: true
  createdAt?: true
  _all?: true
}

export type IncomeEventAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which IncomeEvent to aggregate.
   */
  where?: Prisma.IncomeEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IncomeEvents to fetch.
   */
  orderBy?: Prisma.IncomeEventOrderByWithRelationInput | Prisma.IncomeEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.IncomeEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IncomeEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IncomeEvents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned IncomeEvents
  **/
  _count?: true | IncomeEventCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: IncomeEventAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: IncomeEventSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: IncomeEventMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: IncomeEventMaxAggregateInputType
}

export type GetIncomeEventAggregateType<T extends IncomeEventAggregateArgs> = {
      [P in keyof T & keyof AggregateIncomeEvent]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIncomeEvent[P]>
    : Prisma.GetScalarType<T[P], AggregateIncomeEvent[P]>
}




export type IncomeEventGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IncomeEventWhereInput
  orderBy?: Prisma.IncomeEventOrderByWithAggregationInput | Prisma.IncomeEventOrderByWithAggregationInput[]
  by: Prisma.IncomeEventScalarFieldEnum[] | Prisma.IncomeEventScalarFieldEnum
  having?: Prisma.IncomeEventScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: IncomeEventCountAggregateInputType | true
  _avg?: IncomeEventAvgAggregateInputType
  _sum?: IncomeEventSumAggregateInputType
  _min?: IncomeEventMinAggregateInputType
  _max?: IncomeEventMaxAggregateInputType
}

export type IncomeEventGroupByOutputType = {
  id: number
  incomeId: number | null
  clerkId: string
  accountId: number | null
  type: $Enums.IncomeType
  amount: number
  netAmount: number | null
  receivedAt: Date
  description: string | null
  createdAt: Date
  _count: IncomeEventCountAggregateOutputType | null
  _avg: IncomeEventAvgAggregateOutputType | null
  _sum: IncomeEventSumAggregateOutputType | null
  _min: IncomeEventMinAggregateOutputType | null
  _max: IncomeEventMaxAggregateOutputType | null
}

type GetIncomeEventGroupByPayload<T extends IncomeEventGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<IncomeEventGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof IncomeEventGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], IncomeEventGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], IncomeEventGroupByOutputType[P]>
      }
    >
  >



export type IncomeEventWhereInput = {
  AND?: Prisma.IncomeEventWhereInput | Prisma.IncomeEventWhereInput[]
  OR?: Prisma.IncomeEventWhereInput[]
  NOT?: Prisma.IncomeEventWhereInput | Prisma.IncomeEventWhereInput[]
  id?: Prisma.IntFilter<"IncomeEvent"> | number
  incomeId?: Prisma.IntNullableFilter<"IncomeEvent"> | number | null
  clerkId?: Prisma.StringFilter<"IncomeEvent"> | string
  accountId?: Prisma.IntNullableFilter<"IncomeEvent"> | number | null
  type?: Prisma.EnumIncomeTypeFilter<"IncomeEvent"> | $Enums.IncomeType
  amount?: Prisma.FloatFilter<"IncomeEvent"> | number
  netAmount?: Prisma.FloatNullableFilter<"IncomeEvent"> | number | null
  receivedAt?: Prisma.DateTimeFilter<"IncomeEvent"> | Date | string
  description?: Prisma.StringNullableFilter<"IncomeEvent"> | string | null
  createdAt?: Prisma.DateTimeFilter<"IncomeEvent"> | Date | string
  income?: Prisma.XOR<Prisma.IncomeNullableScalarRelationFilter, Prisma.IncomeWhereInput> | null
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  account?: Prisma.XOR<Prisma.AccountNullableScalarRelationFilter, Prisma.AccountWhereInput> | null
}

export type IncomeEventOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  incomeId?: Prisma.SortOrderInput | Prisma.SortOrder
  clerkId?: Prisma.SortOrder
  accountId?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  netAmount?: Prisma.SortOrderInput | Prisma.SortOrder
  receivedAt?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  income?: Prisma.IncomeOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
  account?: Prisma.AccountOrderByWithRelationInput
}

export type IncomeEventWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.IncomeEventWhereInput | Prisma.IncomeEventWhereInput[]
  OR?: Prisma.IncomeEventWhereInput[]
  NOT?: Prisma.IncomeEventWhereInput | Prisma.IncomeEventWhereInput[]
  incomeId?: Prisma.IntNullableFilter<"IncomeEvent"> | number | null
  clerkId?: Prisma.StringFilter<"IncomeEvent"> | string
  accountId?: Prisma.IntNullableFilter<"IncomeEvent"> | number | null
  type?: Prisma.EnumIncomeTypeFilter<"IncomeEvent"> | $Enums.IncomeType
  amount?: Prisma.FloatFilter<"IncomeEvent"> | number
  netAmount?: Prisma.FloatNullableFilter<"IncomeEvent"> | number | null
  receivedAt?: Prisma.DateTimeFilter<"IncomeEvent"> | Date | string
  description?: Prisma.StringNullableFilter<"IncomeEvent"> | string | null
  createdAt?: Prisma.DateTimeFilter<"IncomeEvent"> | Date | string
  income?: Prisma.XOR<Prisma.IncomeNullableScalarRelationFilter, Prisma.IncomeWhereInput> | null
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  account?: Prisma.XOR<Prisma.AccountNullableScalarRelationFilter, Prisma.AccountWhereInput> | null
}, "id">

export type IncomeEventOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  incomeId?: Prisma.SortOrderInput | Prisma.SortOrder
  clerkId?: Prisma.SortOrder
  accountId?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  netAmount?: Prisma.SortOrderInput | Prisma.SortOrder
  receivedAt?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.IncomeEventCountOrderByAggregateInput
  _avg?: Prisma.IncomeEventAvgOrderByAggregateInput
  _max?: Prisma.IncomeEventMaxOrderByAggregateInput
  _min?: Prisma.IncomeEventMinOrderByAggregateInput
  _sum?: Prisma.IncomeEventSumOrderByAggregateInput
}

export type IncomeEventScalarWhereWithAggregatesInput = {
  AND?: Prisma.IncomeEventScalarWhereWithAggregatesInput | Prisma.IncomeEventScalarWhereWithAggregatesInput[]
  OR?: Prisma.IncomeEventScalarWhereWithAggregatesInput[]
  NOT?: Prisma.IncomeEventScalarWhereWithAggregatesInput | Prisma.IncomeEventScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"IncomeEvent"> | number
  incomeId?: Prisma.IntNullableWithAggregatesFilter<"IncomeEvent"> | number | null
  clerkId?: Prisma.StringWithAggregatesFilter<"IncomeEvent"> | string
  accountId?: Prisma.IntNullableWithAggregatesFilter<"IncomeEvent"> | number | null
  type?: Prisma.EnumIncomeTypeWithAggregatesFilter<"IncomeEvent"> | $Enums.IncomeType
  amount?: Prisma.FloatWithAggregatesFilter<"IncomeEvent"> | number
  netAmount?: Prisma.FloatNullableWithAggregatesFilter<"IncomeEvent"> | number | null
  receivedAt?: Prisma.DateTimeWithAggregatesFilter<"IncomeEvent"> | Date | string
  description?: Prisma.StringNullableWithAggregatesFilter<"IncomeEvent"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"IncomeEvent"> | Date | string
}

export type IncomeEventCreateInput = {
  type: $Enums.IncomeType
  amount: number
  netAmount?: number | null
  receivedAt?: Date | string
  description?: string | null
  createdAt?: Date | string
  income?: Prisma.IncomeCreateNestedOneWithoutEventsInput
  user: Prisma.UserCreateNestedOneWithoutIncomeEventInput
  account?: Prisma.AccountCreateNestedOneWithoutIncomeEventInput
}

export type IncomeEventUncheckedCreateInput = {
  id?: number
  incomeId?: number | null
  clerkId: string
  accountId?: number | null
  type: $Enums.IncomeType
  amount: number
  netAmount?: number | null
  receivedAt?: Date | string
  description?: string | null
  createdAt?: Date | string
}

export type IncomeEventUpdateInput = {
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  netAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  receivedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  income?: Prisma.IncomeUpdateOneWithoutEventsNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutIncomeEventNestedInput
  account?: Prisma.AccountUpdateOneWithoutIncomeEventNestedInput
}

export type IncomeEventUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  incomeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  clerkId?: Prisma.StringFieldUpdateOperationsInput | string
  accountId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  netAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  receivedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IncomeEventCreateManyInput = {
  id?: number
  incomeId?: number | null
  clerkId: string
  accountId?: number | null
  type: $Enums.IncomeType
  amount: number
  netAmount?: number | null
  receivedAt?: Date | string
  description?: string | null
  createdAt?: Date | string
}

export type IncomeEventUpdateManyMutationInput = {
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  netAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  receivedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IncomeEventUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  incomeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  clerkId?: Prisma.StringFieldUpdateOperationsInput | string
  accountId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  netAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  receivedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IncomeEventListRelationFilter = {
  every?: Prisma.IncomeEventWhereInput
  some?: Prisma.IncomeEventWhereInput
  none?: Prisma.IncomeEventWhereInput
}

export type IncomeEventOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type IncomeEventCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  incomeId?: Prisma.SortOrder
  clerkId?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  netAmount?: Prisma.SortOrder
  receivedAt?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type IncomeEventAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  incomeId?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  netAmount?: Prisma.SortOrder
}

export type IncomeEventMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  incomeId?: Prisma.SortOrder
  clerkId?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  netAmount?: Prisma.SortOrder
  receivedAt?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type IncomeEventMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  incomeId?: Prisma.SortOrder
  clerkId?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  netAmount?: Prisma.SortOrder
  receivedAt?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type IncomeEventSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  incomeId?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  netAmount?: Prisma.SortOrder
}

export type IncomeEventCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.IncomeEventCreateWithoutUserInput, Prisma.IncomeEventUncheckedCreateWithoutUserInput> | Prisma.IncomeEventCreateWithoutUserInput[] | Prisma.IncomeEventUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.IncomeEventCreateOrConnectWithoutUserInput | Prisma.IncomeEventCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.IncomeEventCreateManyUserInputEnvelope
  connect?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
}

export type IncomeEventUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.IncomeEventCreateWithoutUserInput, Prisma.IncomeEventUncheckedCreateWithoutUserInput> | Prisma.IncomeEventCreateWithoutUserInput[] | Prisma.IncomeEventUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.IncomeEventCreateOrConnectWithoutUserInput | Prisma.IncomeEventCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.IncomeEventCreateManyUserInputEnvelope
  connect?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
}

export type IncomeEventUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.IncomeEventCreateWithoutUserInput, Prisma.IncomeEventUncheckedCreateWithoutUserInput> | Prisma.IncomeEventCreateWithoutUserInput[] | Prisma.IncomeEventUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.IncomeEventCreateOrConnectWithoutUserInput | Prisma.IncomeEventCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.IncomeEventUpsertWithWhereUniqueWithoutUserInput | Prisma.IncomeEventUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.IncomeEventCreateManyUserInputEnvelope
  set?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  disconnect?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  delete?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  connect?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  update?: Prisma.IncomeEventUpdateWithWhereUniqueWithoutUserInput | Prisma.IncomeEventUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.IncomeEventUpdateManyWithWhereWithoutUserInput | Prisma.IncomeEventUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.IncomeEventScalarWhereInput | Prisma.IncomeEventScalarWhereInput[]
}

export type IncomeEventUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.IncomeEventCreateWithoutUserInput, Prisma.IncomeEventUncheckedCreateWithoutUserInput> | Prisma.IncomeEventCreateWithoutUserInput[] | Prisma.IncomeEventUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.IncomeEventCreateOrConnectWithoutUserInput | Prisma.IncomeEventCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.IncomeEventUpsertWithWhereUniqueWithoutUserInput | Prisma.IncomeEventUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.IncomeEventCreateManyUserInputEnvelope
  set?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  disconnect?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  delete?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  connect?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  update?: Prisma.IncomeEventUpdateWithWhereUniqueWithoutUserInput | Prisma.IncomeEventUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.IncomeEventUpdateManyWithWhereWithoutUserInput | Prisma.IncomeEventUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.IncomeEventScalarWhereInput | Prisma.IncomeEventScalarWhereInput[]
}

export type IncomeEventCreateNestedManyWithoutIncomeInput = {
  create?: Prisma.XOR<Prisma.IncomeEventCreateWithoutIncomeInput, Prisma.IncomeEventUncheckedCreateWithoutIncomeInput> | Prisma.IncomeEventCreateWithoutIncomeInput[] | Prisma.IncomeEventUncheckedCreateWithoutIncomeInput[]
  connectOrCreate?: Prisma.IncomeEventCreateOrConnectWithoutIncomeInput | Prisma.IncomeEventCreateOrConnectWithoutIncomeInput[]
  createMany?: Prisma.IncomeEventCreateManyIncomeInputEnvelope
  connect?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
}

export type IncomeEventUncheckedCreateNestedManyWithoutIncomeInput = {
  create?: Prisma.XOR<Prisma.IncomeEventCreateWithoutIncomeInput, Prisma.IncomeEventUncheckedCreateWithoutIncomeInput> | Prisma.IncomeEventCreateWithoutIncomeInput[] | Prisma.IncomeEventUncheckedCreateWithoutIncomeInput[]
  connectOrCreate?: Prisma.IncomeEventCreateOrConnectWithoutIncomeInput | Prisma.IncomeEventCreateOrConnectWithoutIncomeInput[]
  createMany?: Prisma.IncomeEventCreateManyIncomeInputEnvelope
  connect?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
}

export type IncomeEventUpdateManyWithoutIncomeNestedInput = {
  create?: Prisma.XOR<Prisma.IncomeEventCreateWithoutIncomeInput, Prisma.IncomeEventUncheckedCreateWithoutIncomeInput> | Prisma.IncomeEventCreateWithoutIncomeInput[] | Prisma.IncomeEventUncheckedCreateWithoutIncomeInput[]
  connectOrCreate?: Prisma.IncomeEventCreateOrConnectWithoutIncomeInput | Prisma.IncomeEventCreateOrConnectWithoutIncomeInput[]
  upsert?: Prisma.IncomeEventUpsertWithWhereUniqueWithoutIncomeInput | Prisma.IncomeEventUpsertWithWhereUniqueWithoutIncomeInput[]
  createMany?: Prisma.IncomeEventCreateManyIncomeInputEnvelope
  set?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  disconnect?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  delete?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  connect?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  update?: Prisma.IncomeEventUpdateWithWhereUniqueWithoutIncomeInput | Prisma.IncomeEventUpdateWithWhereUniqueWithoutIncomeInput[]
  updateMany?: Prisma.IncomeEventUpdateManyWithWhereWithoutIncomeInput | Prisma.IncomeEventUpdateManyWithWhereWithoutIncomeInput[]
  deleteMany?: Prisma.IncomeEventScalarWhereInput | Prisma.IncomeEventScalarWhereInput[]
}

export type IncomeEventUncheckedUpdateManyWithoutIncomeNestedInput = {
  create?: Prisma.XOR<Prisma.IncomeEventCreateWithoutIncomeInput, Prisma.IncomeEventUncheckedCreateWithoutIncomeInput> | Prisma.IncomeEventCreateWithoutIncomeInput[] | Prisma.IncomeEventUncheckedCreateWithoutIncomeInput[]
  connectOrCreate?: Prisma.IncomeEventCreateOrConnectWithoutIncomeInput | Prisma.IncomeEventCreateOrConnectWithoutIncomeInput[]
  upsert?: Prisma.IncomeEventUpsertWithWhereUniqueWithoutIncomeInput | Prisma.IncomeEventUpsertWithWhereUniqueWithoutIncomeInput[]
  createMany?: Prisma.IncomeEventCreateManyIncomeInputEnvelope
  set?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  disconnect?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  delete?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  connect?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  update?: Prisma.IncomeEventUpdateWithWhereUniqueWithoutIncomeInput | Prisma.IncomeEventUpdateWithWhereUniqueWithoutIncomeInput[]
  updateMany?: Prisma.IncomeEventUpdateManyWithWhereWithoutIncomeInput | Prisma.IncomeEventUpdateManyWithWhereWithoutIncomeInput[]
  deleteMany?: Prisma.IncomeEventScalarWhereInput | Prisma.IncomeEventScalarWhereInput[]
}

export type IncomeEventCreateNestedManyWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.IncomeEventCreateWithoutAccountInput, Prisma.IncomeEventUncheckedCreateWithoutAccountInput> | Prisma.IncomeEventCreateWithoutAccountInput[] | Prisma.IncomeEventUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.IncomeEventCreateOrConnectWithoutAccountInput | Prisma.IncomeEventCreateOrConnectWithoutAccountInput[]
  createMany?: Prisma.IncomeEventCreateManyAccountInputEnvelope
  connect?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
}

export type IncomeEventUncheckedCreateNestedManyWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.IncomeEventCreateWithoutAccountInput, Prisma.IncomeEventUncheckedCreateWithoutAccountInput> | Prisma.IncomeEventCreateWithoutAccountInput[] | Prisma.IncomeEventUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.IncomeEventCreateOrConnectWithoutAccountInput | Prisma.IncomeEventCreateOrConnectWithoutAccountInput[]
  createMany?: Prisma.IncomeEventCreateManyAccountInputEnvelope
  connect?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
}

export type IncomeEventUpdateManyWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.IncomeEventCreateWithoutAccountInput, Prisma.IncomeEventUncheckedCreateWithoutAccountInput> | Prisma.IncomeEventCreateWithoutAccountInput[] | Prisma.IncomeEventUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.IncomeEventCreateOrConnectWithoutAccountInput | Prisma.IncomeEventCreateOrConnectWithoutAccountInput[]
  upsert?: Prisma.IncomeEventUpsertWithWhereUniqueWithoutAccountInput | Prisma.IncomeEventUpsertWithWhereUniqueWithoutAccountInput[]
  createMany?: Prisma.IncomeEventCreateManyAccountInputEnvelope
  set?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  disconnect?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  delete?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  connect?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  update?: Prisma.IncomeEventUpdateWithWhereUniqueWithoutAccountInput | Prisma.IncomeEventUpdateWithWhereUniqueWithoutAccountInput[]
  updateMany?: Prisma.IncomeEventUpdateManyWithWhereWithoutAccountInput | Prisma.IncomeEventUpdateManyWithWhereWithoutAccountInput[]
  deleteMany?: Prisma.IncomeEventScalarWhereInput | Prisma.IncomeEventScalarWhereInput[]
}

export type IncomeEventUncheckedUpdateManyWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.IncomeEventCreateWithoutAccountInput, Prisma.IncomeEventUncheckedCreateWithoutAccountInput> | Prisma.IncomeEventCreateWithoutAccountInput[] | Prisma.IncomeEventUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.IncomeEventCreateOrConnectWithoutAccountInput | Prisma.IncomeEventCreateOrConnectWithoutAccountInput[]
  upsert?: Prisma.IncomeEventUpsertWithWhereUniqueWithoutAccountInput | Prisma.IncomeEventUpsertWithWhereUniqueWithoutAccountInput[]
  createMany?: Prisma.IncomeEventCreateManyAccountInputEnvelope
  set?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  disconnect?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  delete?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  connect?: Prisma.IncomeEventWhereUniqueInput | Prisma.IncomeEventWhereUniqueInput[]
  update?: Prisma.IncomeEventUpdateWithWhereUniqueWithoutAccountInput | Prisma.IncomeEventUpdateWithWhereUniqueWithoutAccountInput[]
  updateMany?: Prisma.IncomeEventUpdateManyWithWhereWithoutAccountInput | Prisma.IncomeEventUpdateManyWithWhereWithoutAccountInput[]
  deleteMany?: Prisma.IncomeEventScalarWhereInput | Prisma.IncomeEventScalarWhereInput[]
}

export type IncomeEventCreateWithoutUserInput = {
  type: $Enums.IncomeType
  amount: number
  netAmount?: number | null
  receivedAt?: Date | string
  description?: string | null
  createdAt?: Date | string
  income?: Prisma.IncomeCreateNestedOneWithoutEventsInput
  account?: Prisma.AccountCreateNestedOneWithoutIncomeEventInput
}

export type IncomeEventUncheckedCreateWithoutUserInput = {
  id?: number
  incomeId?: number | null
  accountId?: number | null
  type: $Enums.IncomeType
  amount: number
  netAmount?: number | null
  receivedAt?: Date | string
  description?: string | null
  createdAt?: Date | string
}

export type IncomeEventCreateOrConnectWithoutUserInput = {
  where: Prisma.IncomeEventWhereUniqueInput
  create: Prisma.XOR<Prisma.IncomeEventCreateWithoutUserInput, Prisma.IncomeEventUncheckedCreateWithoutUserInput>
}

export type IncomeEventCreateManyUserInputEnvelope = {
  data: Prisma.IncomeEventCreateManyUserInput | Prisma.IncomeEventCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type IncomeEventUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.IncomeEventWhereUniqueInput
  update: Prisma.XOR<Prisma.IncomeEventUpdateWithoutUserInput, Prisma.IncomeEventUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.IncomeEventCreateWithoutUserInput, Prisma.IncomeEventUncheckedCreateWithoutUserInput>
}

export type IncomeEventUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.IncomeEventWhereUniqueInput
  data: Prisma.XOR<Prisma.IncomeEventUpdateWithoutUserInput, Prisma.IncomeEventUncheckedUpdateWithoutUserInput>
}

export type IncomeEventUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.IncomeEventScalarWhereInput
  data: Prisma.XOR<Prisma.IncomeEventUpdateManyMutationInput, Prisma.IncomeEventUncheckedUpdateManyWithoutUserInput>
}

export type IncomeEventScalarWhereInput = {
  AND?: Prisma.IncomeEventScalarWhereInput | Prisma.IncomeEventScalarWhereInput[]
  OR?: Prisma.IncomeEventScalarWhereInput[]
  NOT?: Prisma.IncomeEventScalarWhereInput | Prisma.IncomeEventScalarWhereInput[]
  id?: Prisma.IntFilter<"IncomeEvent"> | number
  incomeId?: Prisma.IntNullableFilter<"IncomeEvent"> | number | null
  clerkId?: Prisma.StringFilter<"IncomeEvent"> | string
  accountId?: Prisma.IntNullableFilter<"IncomeEvent"> | number | null
  type?: Prisma.EnumIncomeTypeFilter<"IncomeEvent"> | $Enums.IncomeType
  amount?: Prisma.FloatFilter<"IncomeEvent"> | number
  netAmount?: Prisma.FloatNullableFilter<"IncomeEvent"> | number | null
  receivedAt?: Prisma.DateTimeFilter<"IncomeEvent"> | Date | string
  description?: Prisma.StringNullableFilter<"IncomeEvent"> | string | null
  createdAt?: Prisma.DateTimeFilter<"IncomeEvent"> | Date | string
}

export type IncomeEventCreateWithoutIncomeInput = {
  type: $Enums.IncomeType
  amount: number
  netAmount?: number | null
  receivedAt?: Date | string
  description?: string | null
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutIncomeEventInput
  account?: Prisma.AccountCreateNestedOneWithoutIncomeEventInput
}

export type IncomeEventUncheckedCreateWithoutIncomeInput = {
  id?: number
  clerkId: string
  accountId?: number | null
  type: $Enums.IncomeType
  amount: number
  netAmount?: number | null
  receivedAt?: Date | string
  description?: string | null
  createdAt?: Date | string
}

export type IncomeEventCreateOrConnectWithoutIncomeInput = {
  where: Prisma.IncomeEventWhereUniqueInput
  create: Prisma.XOR<Prisma.IncomeEventCreateWithoutIncomeInput, Prisma.IncomeEventUncheckedCreateWithoutIncomeInput>
}

export type IncomeEventCreateManyIncomeInputEnvelope = {
  data: Prisma.IncomeEventCreateManyIncomeInput | Prisma.IncomeEventCreateManyIncomeInput[]
  skipDuplicates?: boolean
}

export type IncomeEventUpsertWithWhereUniqueWithoutIncomeInput = {
  where: Prisma.IncomeEventWhereUniqueInput
  update: Prisma.XOR<Prisma.IncomeEventUpdateWithoutIncomeInput, Prisma.IncomeEventUncheckedUpdateWithoutIncomeInput>
  create: Prisma.XOR<Prisma.IncomeEventCreateWithoutIncomeInput, Prisma.IncomeEventUncheckedCreateWithoutIncomeInput>
}

export type IncomeEventUpdateWithWhereUniqueWithoutIncomeInput = {
  where: Prisma.IncomeEventWhereUniqueInput
  data: Prisma.XOR<Prisma.IncomeEventUpdateWithoutIncomeInput, Prisma.IncomeEventUncheckedUpdateWithoutIncomeInput>
}

export type IncomeEventUpdateManyWithWhereWithoutIncomeInput = {
  where: Prisma.IncomeEventScalarWhereInput
  data: Prisma.XOR<Prisma.IncomeEventUpdateManyMutationInput, Prisma.IncomeEventUncheckedUpdateManyWithoutIncomeInput>
}

export type IncomeEventCreateWithoutAccountInput = {
  type: $Enums.IncomeType
  amount: number
  netAmount?: number | null
  receivedAt?: Date | string
  description?: string | null
  createdAt?: Date | string
  income?: Prisma.IncomeCreateNestedOneWithoutEventsInput
  user: Prisma.UserCreateNestedOneWithoutIncomeEventInput
}

export type IncomeEventUncheckedCreateWithoutAccountInput = {
  id?: number
  incomeId?: number | null
  clerkId: string
  type: $Enums.IncomeType
  amount: number
  netAmount?: number | null
  receivedAt?: Date | string
  description?: string | null
  createdAt?: Date | string
}

export type IncomeEventCreateOrConnectWithoutAccountInput = {
  where: Prisma.IncomeEventWhereUniqueInput
  create: Prisma.XOR<Prisma.IncomeEventCreateWithoutAccountInput, Prisma.IncomeEventUncheckedCreateWithoutAccountInput>
}

export type IncomeEventCreateManyAccountInputEnvelope = {
  data: Prisma.IncomeEventCreateManyAccountInput | Prisma.IncomeEventCreateManyAccountInput[]
  skipDuplicates?: boolean
}

export type IncomeEventUpsertWithWhereUniqueWithoutAccountInput = {
  where: Prisma.IncomeEventWhereUniqueInput
  update: Prisma.XOR<Prisma.IncomeEventUpdateWithoutAccountInput, Prisma.IncomeEventUncheckedUpdateWithoutAccountInput>
  create: Prisma.XOR<Prisma.IncomeEventCreateWithoutAccountInput, Prisma.IncomeEventUncheckedCreateWithoutAccountInput>
}

export type IncomeEventUpdateWithWhereUniqueWithoutAccountInput = {
  where: Prisma.IncomeEventWhereUniqueInput
  data: Prisma.XOR<Prisma.IncomeEventUpdateWithoutAccountInput, Prisma.IncomeEventUncheckedUpdateWithoutAccountInput>
}

export type IncomeEventUpdateManyWithWhereWithoutAccountInput = {
  where: Prisma.IncomeEventScalarWhereInput
  data: Prisma.XOR<Prisma.IncomeEventUpdateManyMutationInput, Prisma.IncomeEventUncheckedUpdateManyWithoutAccountInput>
}

export type IncomeEventCreateManyUserInput = {
  id?: number
  incomeId?: number | null
  accountId?: number | null
  type: $Enums.IncomeType
  amount: number
  netAmount?: number | null
  receivedAt?: Date | string
  description?: string | null
  createdAt?: Date | string
}

export type IncomeEventUpdateWithoutUserInput = {
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  netAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  receivedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  income?: Prisma.IncomeUpdateOneWithoutEventsNestedInput
  account?: Prisma.AccountUpdateOneWithoutIncomeEventNestedInput
}

export type IncomeEventUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  incomeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  accountId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  netAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  receivedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IncomeEventUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  incomeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  accountId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  netAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  receivedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IncomeEventCreateManyIncomeInput = {
  id?: number
  clerkId: string
  accountId?: number | null
  type: $Enums.IncomeType
  amount: number
  netAmount?: number | null
  receivedAt?: Date | string
  description?: string | null
  createdAt?: Date | string
}

export type IncomeEventUpdateWithoutIncomeInput = {
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  netAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  receivedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutIncomeEventNestedInput
  account?: Prisma.AccountUpdateOneWithoutIncomeEventNestedInput
}

export type IncomeEventUncheckedUpdateWithoutIncomeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  clerkId?: Prisma.StringFieldUpdateOperationsInput | string
  accountId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  netAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  receivedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IncomeEventUncheckedUpdateManyWithoutIncomeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  clerkId?: Prisma.StringFieldUpdateOperationsInput | string
  accountId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  netAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  receivedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IncomeEventCreateManyAccountInput = {
  id?: number
  incomeId?: number | null
  clerkId: string
  type: $Enums.IncomeType
  amount: number
  netAmount?: number | null
  receivedAt?: Date | string
  description?: string | null
  createdAt?: Date | string
}

export type IncomeEventUpdateWithoutAccountInput = {
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  netAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  receivedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  income?: Prisma.IncomeUpdateOneWithoutEventsNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutIncomeEventNestedInput
}

export type IncomeEventUncheckedUpdateWithoutAccountInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  incomeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  clerkId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  netAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  receivedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IncomeEventUncheckedUpdateManyWithoutAccountInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  incomeId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  clerkId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  netAmount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  receivedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type IncomeEventSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  incomeId?: boolean
  clerkId?: boolean
  accountId?: boolean
  type?: boolean
  amount?: boolean
  netAmount?: boolean
  receivedAt?: boolean
  description?: boolean
  createdAt?: boolean
  income?: boolean | Prisma.IncomeEvent$incomeArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  account?: boolean | Prisma.IncomeEvent$accountArgs<ExtArgs>
}, ExtArgs["result"]["incomeEvent"]>

export type IncomeEventSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  incomeId?: boolean
  clerkId?: boolean
  accountId?: boolean
  type?: boolean
  amount?: boolean
  netAmount?: boolean
  receivedAt?: boolean
  description?: boolean
  createdAt?: boolean
  income?: boolean | Prisma.IncomeEvent$incomeArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  account?: boolean | Prisma.IncomeEvent$accountArgs<ExtArgs>
}, ExtArgs["result"]["incomeEvent"]>

export type IncomeEventSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  incomeId?: boolean
  clerkId?: boolean
  accountId?: boolean
  type?: boolean
  amount?: boolean
  netAmount?: boolean
  receivedAt?: boolean
  description?: boolean
  createdAt?: boolean
  income?: boolean | Prisma.IncomeEvent$incomeArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  account?: boolean | Prisma.IncomeEvent$accountArgs<ExtArgs>
}, ExtArgs["result"]["incomeEvent"]>

export type IncomeEventSelectScalar = {
  id?: boolean
  incomeId?: boolean
  clerkId?: boolean
  accountId?: boolean
  type?: boolean
  amount?: boolean
  netAmount?: boolean
  receivedAt?: boolean
  description?: boolean
  createdAt?: boolean
}

export type IncomeEventOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "incomeId" | "clerkId" | "accountId" | "type" | "amount" | "netAmount" | "receivedAt" | "description" | "createdAt", ExtArgs["result"]["incomeEvent"]>
export type IncomeEventInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  income?: boolean | Prisma.IncomeEvent$incomeArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  account?: boolean | Prisma.IncomeEvent$accountArgs<ExtArgs>
}
export type IncomeEventIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  income?: boolean | Prisma.IncomeEvent$incomeArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  account?: boolean | Prisma.IncomeEvent$accountArgs<ExtArgs>
}
export type IncomeEventIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  income?: boolean | Prisma.IncomeEvent$incomeArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  account?: boolean | Prisma.IncomeEvent$accountArgs<ExtArgs>
}

export type $IncomeEventPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "IncomeEvent"
  objects: {
    income: Prisma.$IncomePayload<ExtArgs> | null
    user: Prisma.$UserPayload<ExtArgs>
    account: Prisma.$AccountPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    incomeId: number | null
    clerkId: string
    accountId: number | null
    type: $Enums.IncomeType
    amount: number
    netAmount: number | null
    receivedAt: Date
    description: string | null
    createdAt: Date
  }, ExtArgs["result"]["incomeEvent"]>
  composites: {}
}

export type IncomeEventGetPayload<S extends boolean | null | undefined | IncomeEventDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$IncomeEventPayload, S>

export type IncomeEventCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<IncomeEventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: IncomeEventCountAggregateInputType | true
  }

export interface IncomeEventDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IncomeEvent'], meta: { name: 'IncomeEvent' } }
  /**
   * Find zero or one IncomeEvent that matches the filter.
   * @param {IncomeEventFindUniqueArgs} args - Arguments to find a IncomeEvent
   * @example
   * // Get one IncomeEvent
   * const incomeEvent = await prisma.incomeEvent.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends IncomeEventFindUniqueArgs>(args: Prisma.SelectSubset<T, IncomeEventFindUniqueArgs<ExtArgs>>): Prisma.Prisma__IncomeEventClient<runtime.Types.Result.GetResult<Prisma.$IncomeEventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one IncomeEvent that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {IncomeEventFindUniqueOrThrowArgs} args - Arguments to find a IncomeEvent
   * @example
   * // Get one IncomeEvent
   * const incomeEvent = await prisma.incomeEvent.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends IncomeEventFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, IncomeEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__IncomeEventClient<runtime.Types.Result.GetResult<Prisma.$IncomeEventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first IncomeEvent that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeEventFindFirstArgs} args - Arguments to find a IncomeEvent
   * @example
   * // Get one IncomeEvent
   * const incomeEvent = await prisma.incomeEvent.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends IncomeEventFindFirstArgs>(args?: Prisma.SelectSubset<T, IncomeEventFindFirstArgs<ExtArgs>>): Prisma.Prisma__IncomeEventClient<runtime.Types.Result.GetResult<Prisma.$IncomeEventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first IncomeEvent that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeEventFindFirstOrThrowArgs} args - Arguments to find a IncomeEvent
   * @example
   * // Get one IncomeEvent
   * const incomeEvent = await prisma.incomeEvent.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends IncomeEventFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, IncomeEventFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__IncomeEventClient<runtime.Types.Result.GetResult<Prisma.$IncomeEventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more IncomeEvents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeEventFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all IncomeEvents
   * const incomeEvents = await prisma.incomeEvent.findMany()
   * 
   * // Get first 10 IncomeEvents
   * const incomeEvents = await prisma.incomeEvent.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const incomeEventWithIdOnly = await prisma.incomeEvent.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends IncomeEventFindManyArgs>(args?: Prisma.SelectSubset<T, IncomeEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncomeEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a IncomeEvent.
   * @param {IncomeEventCreateArgs} args - Arguments to create a IncomeEvent.
   * @example
   * // Create one IncomeEvent
   * const IncomeEvent = await prisma.incomeEvent.create({
   *   data: {
   *     // ... data to create a IncomeEvent
   *   }
   * })
   * 
   */
  create<T extends IncomeEventCreateArgs>(args: Prisma.SelectSubset<T, IncomeEventCreateArgs<ExtArgs>>): Prisma.Prisma__IncomeEventClient<runtime.Types.Result.GetResult<Prisma.$IncomeEventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many IncomeEvents.
   * @param {IncomeEventCreateManyArgs} args - Arguments to create many IncomeEvents.
   * @example
   * // Create many IncomeEvents
   * const incomeEvent = await prisma.incomeEvent.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends IncomeEventCreateManyArgs>(args?: Prisma.SelectSubset<T, IncomeEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many IncomeEvents and returns the data saved in the database.
   * @param {IncomeEventCreateManyAndReturnArgs} args - Arguments to create many IncomeEvents.
   * @example
   * // Create many IncomeEvents
   * const incomeEvent = await prisma.incomeEvent.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many IncomeEvents and only return the `id`
   * const incomeEventWithIdOnly = await prisma.incomeEvent.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends IncomeEventCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, IncomeEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncomeEventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a IncomeEvent.
   * @param {IncomeEventDeleteArgs} args - Arguments to delete one IncomeEvent.
   * @example
   * // Delete one IncomeEvent
   * const IncomeEvent = await prisma.incomeEvent.delete({
   *   where: {
   *     // ... filter to delete one IncomeEvent
   *   }
   * })
   * 
   */
  delete<T extends IncomeEventDeleteArgs>(args: Prisma.SelectSubset<T, IncomeEventDeleteArgs<ExtArgs>>): Prisma.Prisma__IncomeEventClient<runtime.Types.Result.GetResult<Prisma.$IncomeEventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one IncomeEvent.
   * @param {IncomeEventUpdateArgs} args - Arguments to update one IncomeEvent.
   * @example
   * // Update one IncomeEvent
   * const incomeEvent = await prisma.incomeEvent.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends IncomeEventUpdateArgs>(args: Prisma.SelectSubset<T, IncomeEventUpdateArgs<ExtArgs>>): Prisma.Prisma__IncomeEventClient<runtime.Types.Result.GetResult<Prisma.$IncomeEventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more IncomeEvents.
   * @param {IncomeEventDeleteManyArgs} args - Arguments to filter IncomeEvents to delete.
   * @example
   * // Delete a few IncomeEvents
   * const { count } = await prisma.incomeEvent.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends IncomeEventDeleteManyArgs>(args?: Prisma.SelectSubset<T, IncomeEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IncomeEvents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeEventUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many IncomeEvents
   * const incomeEvent = await prisma.incomeEvent.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends IncomeEventUpdateManyArgs>(args: Prisma.SelectSubset<T, IncomeEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IncomeEvents and returns the data updated in the database.
   * @param {IncomeEventUpdateManyAndReturnArgs} args - Arguments to update many IncomeEvents.
   * @example
   * // Update many IncomeEvents
   * const incomeEvent = await prisma.incomeEvent.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more IncomeEvents and only return the `id`
   * const incomeEventWithIdOnly = await prisma.incomeEvent.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends IncomeEventUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, IncomeEventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncomeEventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one IncomeEvent.
   * @param {IncomeEventUpsertArgs} args - Arguments to update or create a IncomeEvent.
   * @example
   * // Update or create a IncomeEvent
   * const incomeEvent = await prisma.incomeEvent.upsert({
   *   create: {
   *     // ... data to create a IncomeEvent
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the IncomeEvent we want to update
   *   }
   * })
   */
  upsert<T extends IncomeEventUpsertArgs>(args: Prisma.SelectSubset<T, IncomeEventUpsertArgs<ExtArgs>>): Prisma.Prisma__IncomeEventClient<runtime.Types.Result.GetResult<Prisma.$IncomeEventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of IncomeEvents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeEventCountArgs} args - Arguments to filter IncomeEvents to count.
   * @example
   * // Count the number of IncomeEvents
   * const count = await prisma.incomeEvent.count({
   *   where: {
   *     // ... the filter for the IncomeEvents we want to count
   *   }
   * })
  **/
  count<T extends IncomeEventCountArgs>(
    args?: Prisma.Subset<T, IncomeEventCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], IncomeEventCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a IncomeEvent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends IncomeEventAggregateArgs>(args: Prisma.Subset<T, IncomeEventAggregateArgs>): Prisma.PrismaPromise<GetIncomeEventAggregateType<T>>

  /**
   * Group by IncomeEvent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeEventGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends IncomeEventGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: IncomeEventGroupByArgs['orderBy'] }
      : { orderBy?: IncomeEventGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, IncomeEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIncomeEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the IncomeEvent model
 */
readonly fields: IncomeEventFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for IncomeEvent.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__IncomeEventClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  income<T extends Prisma.IncomeEvent$incomeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.IncomeEvent$incomeArgs<ExtArgs>>): Prisma.Prisma__IncomeClient<runtime.Types.Result.GetResult<Prisma.$IncomePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  account<T extends Prisma.IncomeEvent$accountArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.IncomeEvent$accountArgs<ExtArgs>>): Prisma.Prisma__AccountClient<runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the IncomeEvent model
 */
export interface IncomeEventFieldRefs {
  readonly id: Prisma.FieldRef<"IncomeEvent", 'Int'>
  readonly incomeId: Prisma.FieldRef<"IncomeEvent", 'Int'>
  readonly clerkId: Prisma.FieldRef<"IncomeEvent", 'String'>
  readonly accountId: Prisma.FieldRef<"IncomeEvent", 'Int'>
  readonly type: Prisma.FieldRef<"IncomeEvent", 'IncomeType'>
  readonly amount: Prisma.FieldRef<"IncomeEvent", 'Float'>
  readonly netAmount: Prisma.FieldRef<"IncomeEvent", 'Float'>
  readonly receivedAt: Prisma.FieldRef<"IncomeEvent", 'DateTime'>
  readonly description: Prisma.FieldRef<"IncomeEvent", 'String'>
  readonly createdAt: Prisma.FieldRef<"IncomeEvent", 'DateTime'>
}
    

// Custom InputTypes
/**
 * IncomeEvent findUnique
 */
export type IncomeEventFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeEvent
   */
  select?: Prisma.IncomeEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeEvent
   */
  omit?: Prisma.IncomeEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeEventInclude<ExtArgs> | null
  /**
   * Filter, which IncomeEvent to fetch.
   */
  where: Prisma.IncomeEventWhereUniqueInput
}

/**
 * IncomeEvent findUniqueOrThrow
 */
export type IncomeEventFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeEvent
   */
  select?: Prisma.IncomeEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeEvent
   */
  omit?: Prisma.IncomeEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeEventInclude<ExtArgs> | null
  /**
   * Filter, which IncomeEvent to fetch.
   */
  where: Prisma.IncomeEventWhereUniqueInput
}

/**
 * IncomeEvent findFirst
 */
export type IncomeEventFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeEvent
   */
  select?: Prisma.IncomeEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeEvent
   */
  omit?: Prisma.IncomeEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeEventInclude<ExtArgs> | null
  /**
   * Filter, which IncomeEvent to fetch.
   */
  where?: Prisma.IncomeEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IncomeEvents to fetch.
   */
  orderBy?: Prisma.IncomeEventOrderByWithRelationInput | Prisma.IncomeEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for IncomeEvents.
   */
  cursor?: Prisma.IncomeEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IncomeEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IncomeEvents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of IncomeEvents.
   */
  distinct?: Prisma.IncomeEventScalarFieldEnum | Prisma.IncomeEventScalarFieldEnum[]
}

/**
 * IncomeEvent findFirstOrThrow
 */
export type IncomeEventFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeEvent
   */
  select?: Prisma.IncomeEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeEvent
   */
  omit?: Prisma.IncomeEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeEventInclude<ExtArgs> | null
  /**
   * Filter, which IncomeEvent to fetch.
   */
  where?: Prisma.IncomeEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IncomeEvents to fetch.
   */
  orderBy?: Prisma.IncomeEventOrderByWithRelationInput | Prisma.IncomeEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for IncomeEvents.
   */
  cursor?: Prisma.IncomeEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IncomeEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IncomeEvents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of IncomeEvents.
   */
  distinct?: Prisma.IncomeEventScalarFieldEnum | Prisma.IncomeEventScalarFieldEnum[]
}

/**
 * IncomeEvent findMany
 */
export type IncomeEventFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeEvent
   */
  select?: Prisma.IncomeEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeEvent
   */
  omit?: Prisma.IncomeEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeEventInclude<ExtArgs> | null
  /**
   * Filter, which IncomeEvents to fetch.
   */
  where?: Prisma.IncomeEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IncomeEvents to fetch.
   */
  orderBy?: Prisma.IncomeEventOrderByWithRelationInput | Prisma.IncomeEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing IncomeEvents.
   */
  cursor?: Prisma.IncomeEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IncomeEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IncomeEvents.
   */
  skip?: number
  distinct?: Prisma.IncomeEventScalarFieldEnum | Prisma.IncomeEventScalarFieldEnum[]
}

/**
 * IncomeEvent create
 */
export type IncomeEventCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeEvent
   */
  select?: Prisma.IncomeEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeEvent
   */
  omit?: Prisma.IncomeEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeEventInclude<ExtArgs> | null
  /**
   * The data needed to create a IncomeEvent.
   */
  data: Prisma.XOR<Prisma.IncomeEventCreateInput, Prisma.IncomeEventUncheckedCreateInput>
}

/**
 * IncomeEvent createMany
 */
export type IncomeEventCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many IncomeEvents.
   */
  data: Prisma.IncomeEventCreateManyInput | Prisma.IncomeEventCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * IncomeEvent createManyAndReturn
 */
export type IncomeEventCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeEvent
   */
  select?: Prisma.IncomeEventSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeEvent
   */
  omit?: Prisma.IncomeEventOmit<ExtArgs> | null
  /**
   * The data used to create many IncomeEvents.
   */
  data: Prisma.IncomeEventCreateManyInput | Prisma.IncomeEventCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeEventIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * IncomeEvent update
 */
export type IncomeEventUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeEvent
   */
  select?: Prisma.IncomeEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeEvent
   */
  omit?: Prisma.IncomeEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeEventInclude<ExtArgs> | null
  /**
   * The data needed to update a IncomeEvent.
   */
  data: Prisma.XOR<Prisma.IncomeEventUpdateInput, Prisma.IncomeEventUncheckedUpdateInput>
  /**
   * Choose, which IncomeEvent to update.
   */
  where: Prisma.IncomeEventWhereUniqueInput
}

/**
 * IncomeEvent updateMany
 */
export type IncomeEventUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update IncomeEvents.
   */
  data: Prisma.XOR<Prisma.IncomeEventUpdateManyMutationInput, Prisma.IncomeEventUncheckedUpdateManyInput>
  /**
   * Filter which IncomeEvents to update
   */
  where?: Prisma.IncomeEventWhereInput
  /**
   * Limit how many IncomeEvents to update.
   */
  limit?: number
}

/**
 * IncomeEvent updateManyAndReturn
 */
export type IncomeEventUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeEvent
   */
  select?: Prisma.IncomeEventSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeEvent
   */
  omit?: Prisma.IncomeEventOmit<ExtArgs> | null
  /**
   * The data used to update IncomeEvents.
   */
  data: Prisma.XOR<Prisma.IncomeEventUpdateManyMutationInput, Prisma.IncomeEventUncheckedUpdateManyInput>
  /**
   * Filter which IncomeEvents to update
   */
  where?: Prisma.IncomeEventWhereInput
  /**
   * Limit how many IncomeEvents to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeEventIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * IncomeEvent upsert
 */
export type IncomeEventUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeEvent
   */
  select?: Prisma.IncomeEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeEvent
   */
  omit?: Prisma.IncomeEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeEventInclude<ExtArgs> | null
  /**
   * The filter to search for the IncomeEvent to update in case it exists.
   */
  where: Prisma.IncomeEventWhereUniqueInput
  /**
   * In case the IncomeEvent found by the `where` argument doesn't exist, create a new IncomeEvent with this data.
   */
  create: Prisma.XOR<Prisma.IncomeEventCreateInput, Prisma.IncomeEventUncheckedCreateInput>
  /**
   * In case the IncomeEvent was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.IncomeEventUpdateInput, Prisma.IncomeEventUncheckedUpdateInput>
}

/**
 * IncomeEvent delete
 */
export type IncomeEventDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeEvent
   */
  select?: Prisma.IncomeEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeEvent
   */
  omit?: Prisma.IncomeEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeEventInclude<ExtArgs> | null
  /**
   * Filter which IncomeEvent to delete.
   */
  where: Prisma.IncomeEventWhereUniqueInput
}

/**
 * IncomeEvent deleteMany
 */
export type IncomeEventDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which IncomeEvents to delete
   */
  where?: Prisma.IncomeEventWhereInput
  /**
   * Limit how many IncomeEvents to delete.
   */
  limit?: number
}

/**
 * IncomeEvent.income
 */
export type IncomeEvent$incomeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Income
   */
  select?: Prisma.IncomeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Income
   */
  omit?: Prisma.IncomeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeInclude<ExtArgs> | null
  where?: Prisma.IncomeWhereInput
}

/**
 * IncomeEvent.account
 */
export type IncomeEvent$accountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null
  where?: Prisma.AccountWhereInput
}

/**
 * IncomeEvent without action
 */
export type IncomeEventDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeEvent
   */
  select?: Prisma.IncomeEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeEvent
   */
  omit?: Prisma.IncomeEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeEventInclude<ExtArgs> | null
}
