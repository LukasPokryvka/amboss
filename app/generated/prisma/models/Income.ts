
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Income` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Income
 * 
 */
export type IncomeModel = runtime.Types.Result.DefaultSelection<Prisma.$IncomePayload>

export type AggregateIncome = {
  _count: IncomeCountAggregateOutputType | null
  _avg: IncomeAvgAggregateOutputType | null
  _sum: IncomeSumAggregateOutputType | null
  _min: IncomeMinAggregateOutputType | null
  _max: IncomeMaxAggregateOutputType | null
}

export type IncomeAvgAggregateOutputType = {
  id: number | null
  fixedNet: number | null
  hourlyRate: number | null
  hoursPerDay: number | null
}

export type IncomeSumAggregateOutputType = {
  id: number | null
  fixedNet: number | null
  hourlyRate: number | null
  hoursPerDay: number | null
}

export type IncomeMinAggregateOutputType = {
  id: number | null
  clerkId: string | null
  title: string | null
  type: $Enums.IncomeType | null
  fixedNet: number | null
  hourlyRate: number | null
  hoursPerDay: number | null
  frequency: $Enums.Frequency | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type IncomeMaxAggregateOutputType = {
  id: number | null
  clerkId: string | null
  title: string | null
  type: $Enums.IncomeType | null
  fixedNet: number | null
  hourlyRate: number | null
  hoursPerDay: number | null
  frequency: $Enums.Frequency | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type IncomeCountAggregateOutputType = {
  id: number
  clerkId: number
  title: number
  type: number
  fixedNet: number
  hourlyRate: number
  hoursPerDay: number
  frequency: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type IncomeAvgAggregateInputType = {
  id?: true
  fixedNet?: true
  hourlyRate?: true
  hoursPerDay?: true
}

export type IncomeSumAggregateInputType = {
  id?: true
  fixedNet?: true
  hourlyRate?: true
  hoursPerDay?: true
}

export type IncomeMinAggregateInputType = {
  id?: true
  clerkId?: true
  title?: true
  type?: true
  fixedNet?: true
  hourlyRate?: true
  hoursPerDay?: true
  frequency?: true
  createdAt?: true
  updatedAt?: true
}

export type IncomeMaxAggregateInputType = {
  id?: true
  clerkId?: true
  title?: true
  type?: true
  fixedNet?: true
  hourlyRate?: true
  hoursPerDay?: true
  frequency?: true
  createdAt?: true
  updatedAt?: true
}

export type IncomeCountAggregateInputType = {
  id?: true
  clerkId?: true
  title?: true
  type?: true
  fixedNet?: true
  hourlyRate?: true
  hoursPerDay?: true
  frequency?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type IncomeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Income to aggregate.
   */
  where?: Prisma.IncomeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Incomes to fetch.
   */
  orderBy?: Prisma.IncomeOrderByWithRelationInput | Prisma.IncomeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.IncomeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Incomes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Incomes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Incomes
  **/
  _count?: true | IncomeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: IncomeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: IncomeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: IncomeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: IncomeMaxAggregateInputType
}

export type GetIncomeAggregateType<T extends IncomeAggregateArgs> = {
      [P in keyof T & keyof AggregateIncome]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIncome[P]>
    : Prisma.GetScalarType<T[P], AggregateIncome[P]>
}




export type IncomeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IncomeWhereInput
  orderBy?: Prisma.IncomeOrderByWithAggregationInput | Prisma.IncomeOrderByWithAggregationInput[]
  by: Prisma.IncomeScalarFieldEnum[] | Prisma.IncomeScalarFieldEnum
  having?: Prisma.IncomeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: IncomeCountAggregateInputType | true
  _avg?: IncomeAvgAggregateInputType
  _sum?: IncomeSumAggregateInputType
  _min?: IncomeMinAggregateInputType
  _max?: IncomeMaxAggregateInputType
}

export type IncomeGroupByOutputType = {
  id: number
  clerkId: string
  title: string
  type: $Enums.IncomeType
  fixedNet: number | null
  hourlyRate: number | null
  hoursPerDay: number | null
  frequency: $Enums.Frequency | null
  createdAt: Date
  updatedAt: Date
  _count: IncomeCountAggregateOutputType | null
  _avg: IncomeAvgAggregateOutputType | null
  _sum: IncomeSumAggregateOutputType | null
  _min: IncomeMinAggregateOutputType | null
  _max: IncomeMaxAggregateOutputType | null
}

type GetIncomeGroupByPayload<T extends IncomeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<IncomeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof IncomeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], IncomeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], IncomeGroupByOutputType[P]>
      }
    >
  >



export type IncomeWhereInput = {
  AND?: Prisma.IncomeWhereInput | Prisma.IncomeWhereInput[]
  OR?: Prisma.IncomeWhereInput[]
  NOT?: Prisma.IncomeWhereInput | Prisma.IncomeWhereInput[]
  id?: Prisma.IntFilter<"Income"> | number
  clerkId?: Prisma.StringFilter<"Income"> | string
  title?: Prisma.StringFilter<"Income"> | string
  type?: Prisma.EnumIncomeTypeFilter<"Income"> | $Enums.IncomeType
  fixedNet?: Prisma.FloatNullableFilter<"Income"> | number | null
  hourlyRate?: Prisma.FloatNullableFilter<"Income"> | number | null
  hoursPerDay?: Prisma.FloatNullableFilter<"Income"> | number | null
  frequency?: Prisma.EnumFrequencyNullableFilter<"Income"> | $Enums.Frequency | null
  createdAt?: Prisma.DateTimeFilter<"Income"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Income"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  events?: Prisma.IncomeEventListRelationFilter
}

export type IncomeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  clerkId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  type?: Prisma.SortOrder
  fixedNet?: Prisma.SortOrderInput | Prisma.SortOrder
  hourlyRate?: Prisma.SortOrderInput | Prisma.SortOrder
  hoursPerDay?: Prisma.SortOrderInput | Prisma.SortOrder
  frequency?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  events?: Prisma.IncomeEventOrderByRelationAggregateInput
}

export type IncomeWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.IncomeWhereInput | Prisma.IncomeWhereInput[]
  OR?: Prisma.IncomeWhereInput[]
  NOT?: Prisma.IncomeWhereInput | Prisma.IncomeWhereInput[]
  clerkId?: Prisma.StringFilter<"Income"> | string
  title?: Prisma.StringFilter<"Income"> | string
  type?: Prisma.EnumIncomeTypeFilter<"Income"> | $Enums.IncomeType
  fixedNet?: Prisma.FloatNullableFilter<"Income"> | number | null
  hourlyRate?: Prisma.FloatNullableFilter<"Income"> | number | null
  hoursPerDay?: Prisma.FloatNullableFilter<"Income"> | number | null
  frequency?: Prisma.EnumFrequencyNullableFilter<"Income"> | $Enums.Frequency | null
  createdAt?: Prisma.DateTimeFilter<"Income"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Income"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  events?: Prisma.IncomeEventListRelationFilter
}, "id">

export type IncomeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  clerkId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  type?: Prisma.SortOrder
  fixedNet?: Prisma.SortOrderInput | Prisma.SortOrder
  hourlyRate?: Prisma.SortOrderInput | Prisma.SortOrder
  hoursPerDay?: Prisma.SortOrderInput | Prisma.SortOrder
  frequency?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.IncomeCountOrderByAggregateInput
  _avg?: Prisma.IncomeAvgOrderByAggregateInput
  _max?: Prisma.IncomeMaxOrderByAggregateInput
  _min?: Prisma.IncomeMinOrderByAggregateInput
  _sum?: Prisma.IncomeSumOrderByAggregateInput
}

export type IncomeScalarWhereWithAggregatesInput = {
  AND?: Prisma.IncomeScalarWhereWithAggregatesInput | Prisma.IncomeScalarWhereWithAggregatesInput[]
  OR?: Prisma.IncomeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.IncomeScalarWhereWithAggregatesInput | Prisma.IncomeScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Income"> | number
  clerkId?: Prisma.StringWithAggregatesFilter<"Income"> | string
  title?: Prisma.StringWithAggregatesFilter<"Income"> | string
  type?: Prisma.EnumIncomeTypeWithAggregatesFilter<"Income"> | $Enums.IncomeType
  fixedNet?: Prisma.FloatNullableWithAggregatesFilter<"Income"> | number | null
  hourlyRate?: Prisma.FloatNullableWithAggregatesFilter<"Income"> | number | null
  hoursPerDay?: Prisma.FloatNullableWithAggregatesFilter<"Income"> | number | null
  frequency?: Prisma.EnumFrequencyNullableWithAggregatesFilter<"Income"> | $Enums.Frequency | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Income"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Income"> | Date | string
}

export type IncomeCreateInput = {
  title: string
  type: $Enums.IncomeType
  fixedNet?: number | null
  hourlyRate?: number | null
  hoursPerDay?: number | null
  frequency?: $Enums.Frequency | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutIncomeInput
  events?: Prisma.IncomeEventCreateNestedManyWithoutIncomeInput
}

export type IncomeUncheckedCreateInput = {
  id?: number
  clerkId: string
  title: string
  type: $Enums.IncomeType
  fixedNet?: number | null
  hourlyRate?: number | null
  hoursPerDay?: number | null
  frequency?: $Enums.Frequency | null
  createdAt?: Date | string
  updatedAt?: Date | string
  events?: Prisma.IncomeEventUncheckedCreateNestedManyWithoutIncomeInput
}

export type IncomeUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  fixedNet?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  hourlyRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  hoursPerDay?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  frequency?: Prisma.NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutIncomeNestedInput
  events?: Prisma.IncomeEventUpdateManyWithoutIncomeNestedInput
}

export type IncomeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  clerkId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  fixedNet?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  hourlyRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  hoursPerDay?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  frequency?: Prisma.NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  events?: Prisma.IncomeEventUncheckedUpdateManyWithoutIncomeNestedInput
}

export type IncomeCreateManyInput = {
  id?: number
  clerkId: string
  title: string
  type: $Enums.IncomeType
  fixedNet?: number | null
  hourlyRate?: number | null
  hoursPerDay?: number | null
  frequency?: $Enums.Frequency | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type IncomeUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  fixedNet?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  hourlyRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  hoursPerDay?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  frequency?: Prisma.NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IncomeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  clerkId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  fixedNet?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  hourlyRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  hoursPerDay?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  frequency?: Prisma.NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IncomeListRelationFilter = {
  every?: Prisma.IncomeWhereInput
  some?: Prisma.IncomeWhereInput
  none?: Prisma.IncomeWhereInput
}

export type IncomeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type IncomeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  clerkId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  type?: Prisma.SortOrder
  fixedNet?: Prisma.SortOrder
  hourlyRate?: Prisma.SortOrder
  hoursPerDay?: Prisma.SortOrder
  frequency?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type IncomeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fixedNet?: Prisma.SortOrder
  hourlyRate?: Prisma.SortOrder
  hoursPerDay?: Prisma.SortOrder
}

export type IncomeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  clerkId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  type?: Prisma.SortOrder
  fixedNet?: Prisma.SortOrder
  hourlyRate?: Prisma.SortOrder
  hoursPerDay?: Prisma.SortOrder
  frequency?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type IncomeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  clerkId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  type?: Prisma.SortOrder
  fixedNet?: Prisma.SortOrder
  hourlyRate?: Prisma.SortOrder
  hoursPerDay?: Prisma.SortOrder
  frequency?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type IncomeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fixedNet?: Prisma.SortOrder
  hourlyRate?: Prisma.SortOrder
  hoursPerDay?: Prisma.SortOrder
}

export type IncomeNullableScalarRelationFilter = {
  is?: Prisma.IncomeWhereInput | null
  isNot?: Prisma.IncomeWhereInput | null
}

export type IncomeCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.IncomeCreateWithoutUserInput, Prisma.IncomeUncheckedCreateWithoutUserInput> | Prisma.IncomeCreateWithoutUserInput[] | Prisma.IncomeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.IncomeCreateOrConnectWithoutUserInput | Prisma.IncomeCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.IncomeCreateManyUserInputEnvelope
  connect?: Prisma.IncomeWhereUniqueInput | Prisma.IncomeWhereUniqueInput[]
}

export type IncomeUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.IncomeCreateWithoutUserInput, Prisma.IncomeUncheckedCreateWithoutUserInput> | Prisma.IncomeCreateWithoutUserInput[] | Prisma.IncomeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.IncomeCreateOrConnectWithoutUserInput | Prisma.IncomeCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.IncomeCreateManyUserInputEnvelope
  connect?: Prisma.IncomeWhereUniqueInput | Prisma.IncomeWhereUniqueInput[]
}

export type IncomeUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.IncomeCreateWithoutUserInput, Prisma.IncomeUncheckedCreateWithoutUserInput> | Prisma.IncomeCreateWithoutUserInput[] | Prisma.IncomeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.IncomeCreateOrConnectWithoutUserInput | Prisma.IncomeCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.IncomeUpsertWithWhereUniqueWithoutUserInput | Prisma.IncomeUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.IncomeCreateManyUserInputEnvelope
  set?: Prisma.IncomeWhereUniqueInput | Prisma.IncomeWhereUniqueInput[]
  disconnect?: Prisma.IncomeWhereUniqueInput | Prisma.IncomeWhereUniqueInput[]
  delete?: Prisma.IncomeWhereUniqueInput | Prisma.IncomeWhereUniqueInput[]
  connect?: Prisma.IncomeWhereUniqueInput | Prisma.IncomeWhereUniqueInput[]
  update?: Prisma.IncomeUpdateWithWhereUniqueWithoutUserInput | Prisma.IncomeUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.IncomeUpdateManyWithWhereWithoutUserInput | Prisma.IncomeUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.IncomeScalarWhereInput | Prisma.IncomeScalarWhereInput[]
}

export type IncomeUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.IncomeCreateWithoutUserInput, Prisma.IncomeUncheckedCreateWithoutUserInput> | Prisma.IncomeCreateWithoutUserInput[] | Prisma.IncomeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.IncomeCreateOrConnectWithoutUserInput | Prisma.IncomeCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.IncomeUpsertWithWhereUniqueWithoutUserInput | Prisma.IncomeUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.IncomeCreateManyUserInputEnvelope
  set?: Prisma.IncomeWhereUniqueInput | Prisma.IncomeWhereUniqueInput[]
  disconnect?: Prisma.IncomeWhereUniqueInput | Prisma.IncomeWhereUniqueInput[]
  delete?: Prisma.IncomeWhereUniqueInput | Prisma.IncomeWhereUniqueInput[]
  connect?: Prisma.IncomeWhereUniqueInput | Prisma.IncomeWhereUniqueInput[]
  update?: Prisma.IncomeUpdateWithWhereUniqueWithoutUserInput | Prisma.IncomeUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.IncomeUpdateManyWithWhereWithoutUserInput | Prisma.IncomeUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.IncomeScalarWhereInput | Prisma.IncomeScalarWhereInput[]
}

export type EnumIncomeTypeFieldUpdateOperationsInput = {
  set?: $Enums.IncomeType
}

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableEnumFrequencyFieldUpdateOperationsInput = {
  set?: $Enums.Frequency | null
}

export type IncomeCreateNestedOneWithoutEventsInput = {
  create?: Prisma.XOR<Prisma.IncomeCreateWithoutEventsInput, Prisma.IncomeUncheckedCreateWithoutEventsInput>
  connectOrCreate?: Prisma.IncomeCreateOrConnectWithoutEventsInput
  connect?: Prisma.IncomeWhereUniqueInput
}

export type IncomeUpdateOneWithoutEventsNestedInput = {
  create?: Prisma.XOR<Prisma.IncomeCreateWithoutEventsInput, Prisma.IncomeUncheckedCreateWithoutEventsInput>
  connectOrCreate?: Prisma.IncomeCreateOrConnectWithoutEventsInput
  upsert?: Prisma.IncomeUpsertWithoutEventsInput
  disconnect?: Prisma.IncomeWhereInput | boolean
  delete?: Prisma.IncomeWhereInput | boolean
  connect?: Prisma.IncomeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.IncomeUpdateToOneWithWhereWithoutEventsInput, Prisma.IncomeUpdateWithoutEventsInput>, Prisma.IncomeUncheckedUpdateWithoutEventsInput>
}

export type IncomeCreateWithoutUserInput = {
  title: string
  type: $Enums.IncomeType
  fixedNet?: number | null
  hourlyRate?: number | null
  hoursPerDay?: number | null
  frequency?: $Enums.Frequency | null
  createdAt?: Date | string
  updatedAt?: Date | string
  events?: Prisma.IncomeEventCreateNestedManyWithoutIncomeInput
}

export type IncomeUncheckedCreateWithoutUserInput = {
  id?: number
  title: string
  type: $Enums.IncomeType
  fixedNet?: number | null
  hourlyRate?: number | null
  hoursPerDay?: number | null
  frequency?: $Enums.Frequency | null
  createdAt?: Date | string
  updatedAt?: Date | string
  events?: Prisma.IncomeEventUncheckedCreateNestedManyWithoutIncomeInput
}

export type IncomeCreateOrConnectWithoutUserInput = {
  where: Prisma.IncomeWhereUniqueInput
  create: Prisma.XOR<Prisma.IncomeCreateWithoutUserInput, Prisma.IncomeUncheckedCreateWithoutUserInput>
}

export type IncomeCreateManyUserInputEnvelope = {
  data: Prisma.IncomeCreateManyUserInput | Prisma.IncomeCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type IncomeUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.IncomeWhereUniqueInput
  update: Prisma.XOR<Prisma.IncomeUpdateWithoutUserInput, Prisma.IncomeUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.IncomeCreateWithoutUserInput, Prisma.IncomeUncheckedCreateWithoutUserInput>
}

export type IncomeUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.IncomeWhereUniqueInput
  data: Prisma.XOR<Prisma.IncomeUpdateWithoutUserInput, Prisma.IncomeUncheckedUpdateWithoutUserInput>
}

export type IncomeUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.IncomeScalarWhereInput
  data: Prisma.XOR<Prisma.IncomeUpdateManyMutationInput, Prisma.IncomeUncheckedUpdateManyWithoutUserInput>
}

export type IncomeScalarWhereInput = {
  AND?: Prisma.IncomeScalarWhereInput | Prisma.IncomeScalarWhereInput[]
  OR?: Prisma.IncomeScalarWhereInput[]
  NOT?: Prisma.IncomeScalarWhereInput | Prisma.IncomeScalarWhereInput[]
  id?: Prisma.IntFilter<"Income"> | number
  clerkId?: Prisma.StringFilter<"Income"> | string
  title?: Prisma.StringFilter<"Income"> | string
  type?: Prisma.EnumIncomeTypeFilter<"Income"> | $Enums.IncomeType
  fixedNet?: Prisma.FloatNullableFilter<"Income"> | number | null
  hourlyRate?: Prisma.FloatNullableFilter<"Income"> | number | null
  hoursPerDay?: Prisma.FloatNullableFilter<"Income"> | number | null
  frequency?: Prisma.EnumFrequencyNullableFilter<"Income"> | $Enums.Frequency | null
  createdAt?: Prisma.DateTimeFilter<"Income"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Income"> | Date | string
}

export type IncomeCreateWithoutEventsInput = {
  title: string
  type: $Enums.IncomeType
  fixedNet?: number | null
  hourlyRate?: number | null
  hoursPerDay?: number | null
  frequency?: $Enums.Frequency | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutIncomeInput
}

export type IncomeUncheckedCreateWithoutEventsInput = {
  id?: number
  clerkId: string
  title: string
  type: $Enums.IncomeType
  fixedNet?: number | null
  hourlyRate?: number | null
  hoursPerDay?: number | null
  frequency?: $Enums.Frequency | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type IncomeCreateOrConnectWithoutEventsInput = {
  where: Prisma.IncomeWhereUniqueInput
  create: Prisma.XOR<Prisma.IncomeCreateWithoutEventsInput, Prisma.IncomeUncheckedCreateWithoutEventsInput>
}

export type IncomeUpsertWithoutEventsInput = {
  update: Prisma.XOR<Prisma.IncomeUpdateWithoutEventsInput, Prisma.IncomeUncheckedUpdateWithoutEventsInput>
  create: Prisma.XOR<Prisma.IncomeCreateWithoutEventsInput, Prisma.IncomeUncheckedCreateWithoutEventsInput>
  where?: Prisma.IncomeWhereInput
}

export type IncomeUpdateToOneWithWhereWithoutEventsInput = {
  where?: Prisma.IncomeWhereInput
  data: Prisma.XOR<Prisma.IncomeUpdateWithoutEventsInput, Prisma.IncomeUncheckedUpdateWithoutEventsInput>
}

export type IncomeUpdateWithoutEventsInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  fixedNet?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  hourlyRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  hoursPerDay?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  frequency?: Prisma.NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutIncomeNestedInput
}

export type IncomeUncheckedUpdateWithoutEventsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  clerkId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  fixedNet?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  hourlyRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  hoursPerDay?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  frequency?: Prisma.NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IncomeCreateManyUserInput = {
  id?: number
  title: string
  type: $Enums.IncomeType
  fixedNet?: number | null
  hourlyRate?: number | null
  hoursPerDay?: number | null
  frequency?: $Enums.Frequency | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type IncomeUpdateWithoutUserInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  fixedNet?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  hourlyRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  hoursPerDay?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  frequency?: Prisma.NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  events?: Prisma.IncomeEventUpdateManyWithoutIncomeNestedInput
}

export type IncomeUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  fixedNet?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  hourlyRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  hoursPerDay?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  frequency?: Prisma.NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  events?: Prisma.IncomeEventUncheckedUpdateManyWithoutIncomeNestedInput
}

export type IncomeUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumIncomeTypeFieldUpdateOperationsInput | $Enums.IncomeType
  fixedNet?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  hourlyRate?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  hoursPerDay?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  frequency?: Prisma.NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type IncomeCountOutputType
 */

export type IncomeCountOutputType = {
  events: number
}

export type IncomeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  events?: boolean | IncomeCountOutputTypeCountEventsArgs
}

/**
 * IncomeCountOutputType without action
 */
export type IncomeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeCountOutputType
   */
  select?: Prisma.IncomeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * IncomeCountOutputType without action
 */
export type IncomeCountOutputTypeCountEventsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IncomeEventWhereInput
}


export type IncomeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  clerkId?: boolean
  title?: boolean
  type?: boolean
  fixedNet?: boolean
  hourlyRate?: boolean
  hoursPerDay?: boolean
  frequency?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  events?: boolean | Prisma.Income$eventsArgs<ExtArgs>
  _count?: boolean | Prisma.IncomeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["income"]>

export type IncomeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  clerkId?: boolean
  title?: boolean
  type?: boolean
  fixedNet?: boolean
  hourlyRate?: boolean
  hoursPerDay?: boolean
  frequency?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["income"]>

export type IncomeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  clerkId?: boolean
  title?: boolean
  type?: boolean
  fixedNet?: boolean
  hourlyRate?: boolean
  hoursPerDay?: boolean
  frequency?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["income"]>

export type IncomeSelectScalar = {
  id?: boolean
  clerkId?: boolean
  title?: boolean
  type?: boolean
  fixedNet?: boolean
  hourlyRate?: boolean
  hoursPerDay?: boolean
  frequency?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type IncomeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "clerkId" | "title" | "type" | "fixedNet" | "hourlyRate" | "hoursPerDay" | "frequency" | "createdAt" | "updatedAt", ExtArgs["result"]["income"]>
export type IncomeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  events?: boolean | Prisma.Income$eventsArgs<ExtArgs>
  _count?: boolean | Prisma.IncomeCountOutputTypeDefaultArgs<ExtArgs>
}
export type IncomeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type IncomeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $IncomePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Income"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    events: Prisma.$IncomeEventPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    clerkId: string
    title: string
    type: $Enums.IncomeType
    fixedNet: number | null
    hourlyRate: number | null
    hoursPerDay: number | null
    frequency: $Enums.Frequency | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["income"]>
  composites: {}
}

export type IncomeGetPayload<S extends boolean | null | undefined | IncomeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$IncomePayload, S>

export type IncomeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<IncomeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: IncomeCountAggregateInputType | true
  }

export interface IncomeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Income'], meta: { name: 'Income' } }
  /**
   * Find zero or one Income that matches the filter.
   * @param {IncomeFindUniqueArgs} args - Arguments to find a Income
   * @example
   * // Get one Income
   * const income = await prisma.income.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends IncomeFindUniqueArgs>(args: Prisma.SelectSubset<T, IncomeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__IncomeClient<runtime.Types.Result.GetResult<Prisma.$IncomePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Income that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {IncomeFindUniqueOrThrowArgs} args - Arguments to find a Income
   * @example
   * // Get one Income
   * const income = await prisma.income.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends IncomeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, IncomeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__IncomeClient<runtime.Types.Result.GetResult<Prisma.$IncomePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Income that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeFindFirstArgs} args - Arguments to find a Income
   * @example
   * // Get one Income
   * const income = await prisma.income.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends IncomeFindFirstArgs>(args?: Prisma.SelectSubset<T, IncomeFindFirstArgs<ExtArgs>>): Prisma.Prisma__IncomeClient<runtime.Types.Result.GetResult<Prisma.$IncomePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Income that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeFindFirstOrThrowArgs} args - Arguments to find a Income
   * @example
   * // Get one Income
   * const income = await prisma.income.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends IncomeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, IncomeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__IncomeClient<runtime.Types.Result.GetResult<Prisma.$IncomePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Incomes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Incomes
   * const incomes = await prisma.income.findMany()
   * 
   * // Get first 10 Incomes
   * const incomes = await prisma.income.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const incomeWithIdOnly = await prisma.income.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends IncomeFindManyArgs>(args?: Prisma.SelectSubset<T, IncomeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncomePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Income.
   * @param {IncomeCreateArgs} args - Arguments to create a Income.
   * @example
   * // Create one Income
   * const Income = await prisma.income.create({
   *   data: {
   *     // ... data to create a Income
   *   }
   * })
   * 
   */
  create<T extends IncomeCreateArgs>(args: Prisma.SelectSubset<T, IncomeCreateArgs<ExtArgs>>): Prisma.Prisma__IncomeClient<runtime.Types.Result.GetResult<Prisma.$IncomePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Incomes.
   * @param {IncomeCreateManyArgs} args - Arguments to create many Incomes.
   * @example
   * // Create many Incomes
   * const income = await prisma.income.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends IncomeCreateManyArgs>(args?: Prisma.SelectSubset<T, IncomeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Incomes and returns the data saved in the database.
   * @param {IncomeCreateManyAndReturnArgs} args - Arguments to create many Incomes.
   * @example
   * // Create many Incomes
   * const income = await prisma.income.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Incomes and only return the `id`
   * const incomeWithIdOnly = await prisma.income.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends IncomeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, IncomeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncomePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Income.
   * @param {IncomeDeleteArgs} args - Arguments to delete one Income.
   * @example
   * // Delete one Income
   * const Income = await prisma.income.delete({
   *   where: {
   *     // ... filter to delete one Income
   *   }
   * })
   * 
   */
  delete<T extends IncomeDeleteArgs>(args: Prisma.SelectSubset<T, IncomeDeleteArgs<ExtArgs>>): Prisma.Prisma__IncomeClient<runtime.Types.Result.GetResult<Prisma.$IncomePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Income.
   * @param {IncomeUpdateArgs} args - Arguments to update one Income.
   * @example
   * // Update one Income
   * const income = await prisma.income.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends IncomeUpdateArgs>(args: Prisma.SelectSubset<T, IncomeUpdateArgs<ExtArgs>>): Prisma.Prisma__IncomeClient<runtime.Types.Result.GetResult<Prisma.$IncomePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Incomes.
   * @param {IncomeDeleteManyArgs} args - Arguments to filter Incomes to delete.
   * @example
   * // Delete a few Incomes
   * const { count } = await prisma.income.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends IncomeDeleteManyArgs>(args?: Prisma.SelectSubset<T, IncomeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Incomes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Incomes
   * const income = await prisma.income.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends IncomeUpdateManyArgs>(args: Prisma.SelectSubset<T, IncomeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Incomes and returns the data updated in the database.
   * @param {IncomeUpdateManyAndReturnArgs} args - Arguments to update many Incomes.
   * @example
   * // Update many Incomes
   * const income = await prisma.income.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Incomes and only return the `id`
   * const incomeWithIdOnly = await prisma.income.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends IncomeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, IncomeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncomePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Income.
   * @param {IncomeUpsertArgs} args - Arguments to update or create a Income.
   * @example
   * // Update or create a Income
   * const income = await prisma.income.upsert({
   *   create: {
   *     // ... data to create a Income
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Income we want to update
   *   }
   * })
   */
  upsert<T extends IncomeUpsertArgs>(args: Prisma.SelectSubset<T, IncomeUpsertArgs<ExtArgs>>): Prisma.Prisma__IncomeClient<runtime.Types.Result.GetResult<Prisma.$IncomePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Incomes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeCountArgs} args - Arguments to filter Incomes to count.
   * @example
   * // Count the number of Incomes
   * const count = await prisma.income.count({
   *   where: {
   *     // ... the filter for the Incomes we want to count
   *   }
   * })
  **/
  count<T extends IncomeCountArgs>(
    args?: Prisma.Subset<T, IncomeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], IncomeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Income.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends IncomeAggregateArgs>(args: Prisma.Subset<T, IncomeAggregateArgs>): Prisma.PrismaPromise<GetIncomeAggregateType<T>>

  /**
   * Group by Income.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IncomeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends IncomeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: IncomeGroupByArgs['orderBy'] }
      : { orderBy?: IncomeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, IncomeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIncomeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Income model
 */
readonly fields: IncomeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Income.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__IncomeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  events<T extends Prisma.Income$eventsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Income$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IncomeEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Income model
 */
export interface IncomeFieldRefs {
  readonly id: Prisma.FieldRef<"Income", 'Int'>
  readonly clerkId: Prisma.FieldRef<"Income", 'String'>
  readonly title: Prisma.FieldRef<"Income", 'String'>
  readonly type: Prisma.FieldRef<"Income", 'IncomeType'>
  readonly fixedNet: Prisma.FieldRef<"Income", 'Float'>
  readonly hourlyRate: Prisma.FieldRef<"Income", 'Float'>
  readonly hoursPerDay: Prisma.FieldRef<"Income", 'Float'>
  readonly frequency: Prisma.FieldRef<"Income", 'Frequency'>
  readonly createdAt: Prisma.FieldRef<"Income", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Income", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Income findUnique
 */
export type IncomeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Income
   */
  select?: Prisma.IncomeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Income
   */
  omit?: Prisma.IncomeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeInclude<ExtArgs> | null
  /**
   * Filter, which Income to fetch.
   */
  where: Prisma.IncomeWhereUniqueInput
}

/**
 * Income findUniqueOrThrow
 */
export type IncomeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Income
   */
  select?: Prisma.IncomeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Income
   */
  omit?: Prisma.IncomeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeInclude<ExtArgs> | null
  /**
   * Filter, which Income to fetch.
   */
  where: Prisma.IncomeWhereUniqueInput
}

/**
 * Income findFirst
 */
export type IncomeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Income
   */
  select?: Prisma.IncomeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Income
   */
  omit?: Prisma.IncomeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeInclude<ExtArgs> | null
  /**
   * Filter, which Income to fetch.
   */
  where?: Prisma.IncomeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Incomes to fetch.
   */
  orderBy?: Prisma.IncomeOrderByWithRelationInput | Prisma.IncomeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Incomes.
   */
  cursor?: Prisma.IncomeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Incomes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Incomes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Incomes.
   */
  distinct?: Prisma.IncomeScalarFieldEnum | Prisma.IncomeScalarFieldEnum[]
}

/**
 * Income findFirstOrThrow
 */
export type IncomeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Income
   */
  select?: Prisma.IncomeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Income
   */
  omit?: Prisma.IncomeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeInclude<ExtArgs> | null
  /**
   * Filter, which Income to fetch.
   */
  where?: Prisma.IncomeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Incomes to fetch.
   */
  orderBy?: Prisma.IncomeOrderByWithRelationInput | Prisma.IncomeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Incomes.
   */
  cursor?: Prisma.IncomeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Incomes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Incomes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Incomes.
   */
  distinct?: Prisma.IncomeScalarFieldEnum | Prisma.IncomeScalarFieldEnum[]
}

/**
 * Income findMany
 */
export type IncomeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Income
   */
  select?: Prisma.IncomeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Income
   */
  omit?: Prisma.IncomeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeInclude<ExtArgs> | null
  /**
   * Filter, which Incomes to fetch.
   */
  where?: Prisma.IncomeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Incomes to fetch.
   */
  orderBy?: Prisma.IncomeOrderByWithRelationInput | Prisma.IncomeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Incomes.
   */
  cursor?: Prisma.IncomeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Incomes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Incomes.
   */
  skip?: number
  distinct?: Prisma.IncomeScalarFieldEnum | Prisma.IncomeScalarFieldEnum[]
}

/**
 * Income create
 */
export type IncomeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Income
   */
  select?: Prisma.IncomeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Income
   */
  omit?: Prisma.IncomeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeInclude<ExtArgs> | null
  /**
   * The data needed to create a Income.
   */
  data: Prisma.XOR<Prisma.IncomeCreateInput, Prisma.IncomeUncheckedCreateInput>
}

/**
 * Income createMany
 */
export type IncomeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Incomes.
   */
  data: Prisma.IncomeCreateManyInput | Prisma.IncomeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Income createManyAndReturn
 */
export type IncomeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Income
   */
  select?: Prisma.IncomeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Income
   */
  omit?: Prisma.IncomeOmit<ExtArgs> | null
  /**
   * The data used to create many Incomes.
   */
  data: Prisma.IncomeCreateManyInput | Prisma.IncomeCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Income update
 */
export type IncomeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Income
   */
  select?: Prisma.IncomeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Income
   */
  omit?: Prisma.IncomeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeInclude<ExtArgs> | null
  /**
   * The data needed to update a Income.
   */
  data: Prisma.XOR<Prisma.IncomeUpdateInput, Prisma.IncomeUncheckedUpdateInput>
  /**
   * Choose, which Income to update.
   */
  where: Prisma.IncomeWhereUniqueInput
}

/**
 * Income updateMany
 */
export type IncomeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Incomes.
   */
  data: Prisma.XOR<Prisma.IncomeUpdateManyMutationInput, Prisma.IncomeUncheckedUpdateManyInput>
  /**
   * Filter which Incomes to update
   */
  where?: Prisma.IncomeWhereInput
  /**
   * Limit how many Incomes to update.
   */
  limit?: number
}

/**
 * Income updateManyAndReturn
 */
export type IncomeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Income
   */
  select?: Prisma.IncomeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Income
   */
  omit?: Prisma.IncomeOmit<ExtArgs> | null
  /**
   * The data used to update Incomes.
   */
  data: Prisma.XOR<Prisma.IncomeUpdateManyMutationInput, Prisma.IncomeUncheckedUpdateManyInput>
  /**
   * Filter which Incomes to update
   */
  where?: Prisma.IncomeWhereInput
  /**
   * Limit how many Incomes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Income upsert
 */
export type IncomeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Income
   */
  select?: Prisma.IncomeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Income
   */
  omit?: Prisma.IncomeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeInclude<ExtArgs> | null
  /**
   * The filter to search for the Income to update in case it exists.
   */
  where: Prisma.IncomeWhereUniqueInput
  /**
   * In case the Income found by the `where` argument doesn't exist, create a new Income with this data.
   */
  create: Prisma.XOR<Prisma.IncomeCreateInput, Prisma.IncomeUncheckedCreateInput>
  /**
   * In case the Income was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.IncomeUpdateInput, Prisma.IncomeUncheckedUpdateInput>
}

/**
 * Income delete
 */
export type IncomeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Income
   */
  select?: Prisma.IncomeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Income
   */
  omit?: Prisma.IncomeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeInclude<ExtArgs> | null
  /**
   * Filter which Income to delete.
   */
  where: Prisma.IncomeWhereUniqueInput
}

/**
 * Income deleteMany
 */
export type IncomeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Incomes to delete
   */
  where?: Prisma.IncomeWhereInput
  /**
   * Limit how many Incomes to delete.
   */
  limit?: number
}

/**
 * Income.events
 */
export type Income$eventsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IncomeEvent
   */
  select?: Prisma.IncomeEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IncomeEvent
   */
  omit?: Prisma.IncomeEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeEventInclude<ExtArgs> | null
  where?: Prisma.IncomeEventWhereInput
  orderBy?: Prisma.IncomeEventOrderByWithRelationInput | Prisma.IncomeEventOrderByWithRelationInput[]
  cursor?: Prisma.IncomeEventWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.IncomeEventScalarFieldEnum | Prisma.IncomeEventScalarFieldEnum[]
}

/**
 * Income without action
 */
export type IncomeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Income
   */
  select?: Prisma.IncomeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Income
   */
  omit?: Prisma.IncomeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IncomeInclude<ExtArgs> | null
}
